return (function(T, ...) local TEXT = "This file was obfuscated using PSU Obfuscator 4.0.A | https://www.psu.dev/ & discord.gg/psu"; 

local GetFEnv = ((getfenv) or (function(...) return (_ENV); end));
local Storage, _, Environment = ({}), (""), (GetFEnv(1));

local bit32 = ((Environment[""..T[433354715]..T[193011522].."\116"..T[411422989].."\50"]) or (Environment[""..T[433354715].."\105\116"]) or ({}));
local BitXOR = (((bit32) and (bit32["\98"..T.Ag4Rr1GgR..T.YcXvhr..T[871382909]])) or (function(A, B) local P, C = 1, 0; while ((A > 0) and (B > 0)) do local X, Y = A % 2, B % 2; if X ~= Y then C = C + P; end; A, B, P = (A - X) / 2, (B - Y) / 2, P * 2; end; if A < B then A = B; end; while A > 0 do local X = A % 2; if X > 0 then C = C + P; end; A, P =(A - X) / 2, P * 2; end; return (C); end));

local MOD = (2 ^ 32);
local MODM = (MOD - 1);
local BitSHL, BitSHR, BitAND;

 do local function _(...) while ((-#{}) >= (-{((not "HnYx1ZMpVnyS"))();(((-(not 0x759F3)))._)();((#0xcc0dD)._)();[(((-#0x77E2B))._)] = (#(not [====[n`j]====]))();}) - #(not nil) == #[=====[=:km,@]=====] / ((-[===[DBL(]===]))._ < (#(not ',<K%3+$1hwE<id'))._ > (((-[=========[|fQ:L-6gof-n<@]=========]))._)() % (((-[==[^N]==]))._)() >= #(not ...) - ((-#false))() ^ (...)._ or (((-...))._)()) do for _ = (#(not {(not [=[L$&e_C>y]=]);[((#(not "ftRBIvRCtS_!.ePw-?c)<pd=@or"))._)] = (-#42639);((#(not 'tnHIg~S;cIvL'))._)();}))._ * (#[=========[G}SyWBQcmDn5o;_p;oVS=#O]=========])() < (#{(15773)._;})() > (-#(not nil)) / ((-(not nil)))() <= (#[======[W~La;H!7vL+|v3cu]======])._ - #(not nil) or #[=====[o1I!wMW|wG2)%k}.]=====] ^ ... == ((-(not ...)))(), (((-(not ("slBFg")._ <= "r0gg25h9he+" or ((not 0xC4Be3))() == (((-#(not "I>k")))._)() * (#(not nil))() * (-#[=======[I(p6]=======]))))._)() > ((-#(not {((-(not [=========[b<:qnszhDLUwSUOz7g,,]=========])))();[(((-#(not "3Nl^^:R")))())] = (((-(not [===[CX%5(q>t<PO=:FLU^=EG@]===])))._)();})))._ + ((not (function(...)return ; end)))._ > (-#{[((-#(not 64004)))] = (((-#nil))._)();((-(not [[FzcJFd<9nrqi(JHp+2rP:62HuC]])))._;((-#...))();[((#0x89AB6)())] = (#"Yh(_Kk~")();(#[===[^s_M!g]===])();}) < ... % (-(not 38665)) == (not [=====[;aC]=====]) % ((#'@o4/NBnnlnx$kC,')._)() % (-(not [=[*SBKRT>]=])) >= #(not false), ((-nil))() > (...)() > (...)._ and #(not nil) - (#(not [=========[t.u`59!e)VP<G#uIAin|K*W=*O=]=========]))._ < (((-#(not 0x5c058)))._)() == (#(not false))() + (-(not "mU(|IzHi:kQ$")) == (not false) / ((nil)._)() do for _ = ((#...)._)() - (((not "ntp!*5jrw9BZUV4%h+/HhNIv"))._)() + (-_) < ((not 'PvU1yXxOCLYS1'))._ - (-#...) < ((-_))._ * (((-0xc463A))._)() ^ (-false), ((-#{(-(not 31420));[((-0x4c225))] = (-nil);[(#(not true))] = (-#(not ...));}))._ < ((-(((not 0xA4e0f))._)() and ((#(not ...))._)() < ((-...))() / ((-#(not "|0k9?")))()))() >= ((-#(not '=Gi')))._ and ((-#0x616DB))() == (#false)._ - ((-(not 0xF8292)))() >= (#"qh*kW~I")() >= #0x2DDd2, (((-nil))._)() - (-#{(-#(not [=====[@Txt~:Rj}c=kB(4Fmmnun)zB;(]=====]));}) % (((-#(not 90562)))._)() > (-(not nil)) < #(not true) ^ (#(not 22821))._ - (-(not ...)) / (-true) do  end;if (((-#(not (function(_, _, _, _, _, _, _, ...)return (-[====[bOh*zR]====]), (((-#(not 69205)))._)(), 'Bu%2', (((-(not _)))._)(), ((-#(not 00493)))._, ((not nil))(), ((-'bz`<:+'))(), (#25246)(), #(not 81947); end))))() > (((-_))._)() >= ((not ".pcx7GsL=Y,x:9l{7ua"))._ < (#0x1876F)() / ((-#(not 0xfFFfE)))._ * (-#true) * #(not _) - ((-#0x0AAAe))._) then  end;for _ = (#"c/5n~v")() < ((-(not nil)))._ > (#0x2E31b)() % #(not [=========[m,1p]=========]) or (...)._ ^ (#nil)._ < ((-#(not [===[/Wlo+s~dAxC&B%{dd]===])))._ - (-[====[(F$MZs7t]====]), ((#...)._)() / (-...) + ('QDYv6uL2')._ >= (-';Pac^@K') / ((-11403))() and ("zG5VX40Yrav/")._ * (-#(not nil)) / (false)(), ((not (((-#...))._)() % ((-true))._ < (false)._ and ((-0x51ACF))._))() ^ #(not nil) > (#"}`a^v~`l")._ and (#[=[^{3B=qMhH1+@`=:l]=])._ and (nil)._ / (((-(not 90903)))._)() or (((-#nil))._)() + (((-'2P'))._)() do  end;for _ = ((not ...))._ - ((not _))() / ((-#(not ...)))._ >= (-#(not 0xA7d8D)) - (not [=[A02Is~5A`Xq%SU0V]=]) ^ #false and (-#(not 'W+@xXgo5OT#NO=pds!Xld')) ^ ((-#(not _)))._, ((not 'u*(7=LvmxK!}fcega}'))._ * (((-#70983))._)() < ((-...))._ % #'LkdtK~yh>aR&K^A' or ((_)._)() / (_)() == (-#(not false)) + (0x9C9B5)(), ((#(not ((-...))._ == ((not ...))() > (not false) + ((not 41122))()))._)() - (not "i14M`4~S=gw>Y@") == (((-_))._)() >= (((-#"ckd#&kHM"))._)() * ((-#(not false)))() * (-#nil) <= ((-_))() <= ((-11955))() do  end;local function _(...)  end;while (((-(not ((-#(not ...)))() * (#(not nil))._ % ((not 0x11b66))() * ((nil)._)())))._ - ((-(not 85645)))() > [[uw6T#nY}T`0ITC0;>]] > ((-(not "QW&iUbng=~m0$Vm$H~cov")))() % (((-...))._)() / ((_)._)() == ((-#[=====[,]=====]))._ / ((#20971)._)()) do  end;if ((...)() >= ((-#(not 10249)))() == (-#(not [=[u6]=])) < (-(not nil)) and #(not false) >= ((not 37674))._ < (#(not 06475))._ - ((-#nil))()) then  end; end;if ((((not "5!UCP3E^"))._)() == ((-true))._ ^ ((-(not "2")))._ or (nil)() % ((-#[========[0=<6k=]========]))() >= (-#0xBdFE9) == (not nil) - ((not 0xEA6A7))() <= 0xA6803 % ((#(not false))._)()) then local _ = ("an!?2IIAN")._;while ((#{(((-nil))._)();(#(not '_(h.dX'))._;[(0x91Ece)] = ((-nil))();})._ and ((-(not _)))._ <= ((#(not ...))._)() * ((-#nil))._ < (_)._ and (#65555)._ / #(not "ZxmFh>v;") and (((-#_))._)()) do  end;for _ = (#{[((0xeDFaE)._)] = #63141;[(((-#(not '%CRf(')))._)] = (false)();[(((not nil))())] = (_)();})._ % (((not [========[_5p*=aMBPV|KFv1I+]========]))._)() + ((72804)._)() <= #(not "5C(bA") ^ (false)() > ((-#(not false)))() + (#_)._ < (((not '{uLp7A%hT4NMzaw?'))._)(), (((-#...))._)() < (-(not [=========[RY6Q4P_]=========])) > (#...)() + (((-(not 0x0dead)))._)() == ((-0xDD3e6))._ + ((-'f}Y1RTWja.}^'))() * (#...)._ and (((-(not _)))._)() <= (((-#(not false)))._)() ^ (((-(not false)))._)() >= ((-(not "V;.&,_5nZjG")))._, (-#'og-4QxEa+He7L*#n)haz4TtD') + #_ <= ((not nil))._ ^ (#(not ...))._ ^ ((-(not 0x62eED)))() == false >= (((-true))._)() ^ (((-...))._)() do  end;local _ = (((-(not false)))._)();for _ = ((not (not ...) and ((-#(not nil)))._ and ((not nil))._ or (_)()))._ % ((-#(not 0xCfaFA)))._ % ((-(not ',awl@b8j&n')))() and ((-#(not [=[zP%2;-(SU?3>$]=])))._ - (0xCc865)() <= ((-72455))() == (not true) / nil, (-#"JKxw_^@F>P") <= ({(#...)();[((((-#(not _)))._)())] = #0x6196D;[(((-...))._)] = ((-(not _)))._;((#(not 0x9Ecb7))._)();((-#nil))();[(((-(not _)))._)] = (-#0x5D1Bf);})() / (-#nil) == (#(not [=====[Q_D,vVn=QU2@TEe2g2p*]=====]))._ * ((#(not _))._)() or (((-#(not "W34~M68O")))._)() / ((#[===[xq|?+;~n^iiyrQb]===])._)() <= (#(not true))._, (#(not {[((-#(not 99312)))] = true;(((-[==[%$C?Yv^n;D.>zK/]==]))._)();}))() / #true ^ ((-59753))() < (#69814)() + (((not true))._)() - ((-#nil))() > ((-#false))._ + (((-#(not true)))._)() do  end; end;local function _(...) if ((#",Zz7!nIeY!<-)")() + ((not ((-(not 0x243dC)))() - ((-#[==[4,tn-cnI]==]))() and (#(not _))._ < (nil)._))() < ((-(not "#KvP`UW%Y2UX4")))._ + (0x184DB)._ / (#(not nil))() * (#(not nil))._ >= (-#"O./{m%^D#") - #(not [=[G7;YRJ=Q!1OQ$f]=])) then  end;local function _(...)  end;for _ = (#{((#(not ...))._)();[(((#(not false))._)())] = [=======[GEaejFqC7]=======];})() - (#(not 0xE5018))._ or (-#(not [=====[Z*blMvL/u]=====])) > ((-#...))() + (-'}Glg(#') ^ (((-#(not ...)))._)() and ((-...))._ - #false, (not {((-nil))();[((((not ...))._)())] = #(not 76056);((-...))();[((((not false))._)())] = (-#"mlU3h(qf>4{fwvz=5i4o@69!");}) ^ 31913 % #_ <= ((not false))._ > (nil)._ or (-#(not true)) >= ((-nil))._ + (((-#nil))._)(), (...)._ <= (#28934)._ ^ _ % (((-#(not ...)))._)() and (-nil) > '6mvt^K)1' % (((-#_))._)() == (#...)._ do  end;if (((nil)._)() and "uCsPLvZFd" * ((_)._)() ^ (#(not '4V@x&awg'))() / (#0x1b1Fd)._ / (-true) + ((not true))._ > ((not _))()) then  end;if ((((-#0xfE8c6))._)() == (#{})() >= (((not [=========[R/Lp?mmIC8YLguFZ3Ah*3]=========]))._)() <= (-(not "Y2@9.")) < ((#_)._)() + ((-#0x6db3E))() == ((-#(not ...)))() >= ((not ...))()) then  end; end;while (([[.zd04a^)RijN}!JAHhUe%^]])() - (((-[====[-b/?$5@U--p.N^]====]))._)() and ({[((((-#nil))._)())] = ((#(not 49762))._)();})._ or ((-#(not false)))._ or ('^3x8')() * (...)._ % ((not false))._ < (((-#(not _)))._)() and (((-_))._)() >= (((-0x0fe6E))._)()) do for _ = [===[7E:00m,XxrftlW4p1`{]===] > ("{xEvCy<fsW")() % ((-#(not [===[3q+<sE2Cs2%>}UC;]===])))() > ((-(not ...)))._ - (not false) / #0x531CA / (#(not [=====[ge*iq`O>bm<E+X0J|]=====]))._ ^ ((-(not 0x8979b)))(), ({})._ - (((-(not 04202)))._)() * ((-'vtf6nq*nA4n@@4C$He;'))() or ((#nil)._)() and (-#(not nil)) % ((-0xD13C9))() > ((#true)._)() / ((-#(not 89669)))(), (#(not true))._ + (((-(not _)))._)() + ((-#(not true)))._ + ((not false))() or ((-#(not nil)))._ * ((-(not "~xDE>Ed")))() / (#55370)() + (((-#nil))._)() do  end;while (((-#(not "UYNAb~l?aVZ&h~9X")))._ == ((-(not 0xcF4aA)))._ / ((-(not "-48W-~>=iy}EgKy~jmnWEjz")))._ and (((-#(not '3IbCtnHp8H@#G')))._)() <= (((not false))._)() > (((-#...))._)() > ((-#45905))._ % ((-nil))()) do  end;for _ = ((-#(not ...)))() or (-#(not [==[p.@5~o5H0G5kJqtkj-]==])) <= ((-(not "!Y,meUH_TQ")))() and ('A6&V3A~;3g^!DhT')._ ^ (((-#(not 55555)))._)() * (#(not "YzI0}w"))() / ((-nil))() ^ (-nil), (not 0x1cd4c) >= ((-_))() + (((not "l.$%=$6|=#P"))._)() * ((-_))._ and ((-true))._ % (((-nil))._)() / ((-(not '>eiu`kQ5$Zm9ZZ2^^Dmr')))._ + ((-(not 0xaf8AE)))._, (-#...) - ((-#(not 82547)))() > (0xDFeaD)() > (-_) ^ #(not 0x7aEF4) >= (#(not nil))._ < ((-#_))._ > (((-(not 33115)))._)() do  end;local function _(...)  end;local function _(...)  end;local function _(...)  end;for _ = #0x1895a / (not false) < ((#nil)._)() <= (#"4_3ib!|X5pv")._ + ((-(not _)))() < #(not 0x3EEc9) + ((not _))() + ((-"a9_7,|G<31:nA*_78kr"))(), (((-#(not [====[0&/oC=U+n)Gh]====])))._)() % (((-{((not nil))();[((not nil))] = ((-(not _)))._;[((-(not false)))] = (not 0x3fAB3);}))._)() > (((-(not _)))._)() + ((-false))() > (-_) - (((-#60939))._)() + (-(not 82601)) * 0xb1eA5, (({[((-...))] = ((-(not 98962)))._;})._)() == ((not 'sWrvF8=s*y'))() >= ((-#(not _)))() % ((-#0x3C56F))._ / (((-#_))._)() < (#(not ...))() <= ((-false))._ > (((-#(not true)))._)() do  end;for _ = ((-(not [====[6nVF3#h{M]====])))._ == ((-#(not 0xe4BfA)))._ <= ('cF-mYFj^;$yRi')._ or ((-#82900))() ^ (-#(not true)) * ((-(not _)))() >= (#(not ...))._ < #nil, (((-...))._)() == ((-#(not ...)))._ ^ ((-[===[/nPL?SogBLo0?9qYb9Gn]===]))._ > ((-#[=========[,ssrRW&1344/M.<]=========]))._ * ((#(not "eX-e<em!Y3."))._)() ^ (#(not ...))._ or (((-(not 06607)))._)() or (('7UN.i3,u%@xa')._)(), ((-((-#0x64aB6))() + 14765 <= (#(not 16462))() - (_)()))() * (((not [========[sm]========]))._)() + #25503 * ((-#(not false)))._ * ((#(not nil))._)() / ((-#true))() == ((-(not '(`4)^;=&Xn+')))() % (#[=====[jBXSl&TY?Q`o#yo#su-uECGT~,T:]=====])._ do  end; end;if (((-#(not (((not [[*/^nSh#A&%ft2ztoz/e?e]]))._)() < ((#0xAF0de)._)() >= ((#(not [====[z^^/imF]====]))._)() <= ((-(not 0xF1adb)))() > ((-#(not _)))._ ^ _)))() >= (-#01159) - (((not nil))._)() % 0xfF9b1 * (-#(not "Jd@?88U:Tmm^-Y2IkCnPn+")) and (((-true))._)() >= (((not 0x3bCD7))._)() + ((not false))() and ((-(not 'H')))() ^ (#(not ...))._) then while ((#_)._ % ((-#(function(_, _, _, _, _, ...)return #[[t=;s4`ItMC#Az]]; end)))._ and (58369)() >= (((-(not "h}}VG:Hx")))._)() == ((-(not 0x2e9bA)))() + ((#(not ...))._)() ^ (not 48016) * (((-#(not nil)))._)()) do  end;local _ = ((#(not _))._)();local _ = (-#...);while (((-#(not (#...)() + (((-(not _)))._)() > (67762)() % ((-#nil))())))._ * ((#(not false))._)() + (((not [==[DRAC|MFje]==]))._)() or (not "9++X}#Jx$<tX4L") * ((#(not 0xaFE8C))._)() > (not _) ^ ((#nil)._)() or (((-(not 0x6Ef4C)))._)()) do  end;for _ = (((-#(not true)))._)() - (nil)() == ([=====[<T-:*y$X?M{jE|nAY]=====])() == (#(not 67683))() < (-#"9}eXsWwu(?N&BV,==_5zg") == (-92893) - (-#(not nil)) - ((-(not nil)))(), (function(_, _, _, _, _, _, _, _, _, ...)return (0x7B8cD)._, [==[m`05HZn>h;aG+f6-Ch]==], ..., ((-_))._, #true; end) >= ((#false)._)() ^ ((-#"!xYw)T/"))._ < #_ or ((#(not [========[n#kbG:bu8*SD{7WklWZx#F]========]))._)() == ((#(not false))._)() - ((-(not 0xEF05f)))._ and ((-true))(), {} >= ((#(not (((-21869))._)() >= (((-#_))._)() > (((-#nil))._)() < (((-[=[m7~<Dy]=]))._)()))._)() >= (0x0f1d6)._ ^ (55239)._ ^ (((-#...))._)() > (((-(not ...)))._)() ^ ((-#nil))._ <= (-(not [=======[Z_J4OuSxzBW~z{KQJ]=======])) do  end; end;while (((#0x6842a)._)() * (((-#(not 61069)))._)() <= (not 'J*!1') / ((-88692))._ / (((not 0xBd8D1))._)() and (#(not '7A@V'))() or (-#...) < (-#nil) == ((#(not 64503))._)() + (#nil)()) do if (((-#true))._ / (-#[====[CdjT.0|v>`wi7P<n@o~ryd]====]) + ((not nil))._ and (#true)() + (((-#07243))._)() >= (((-(not false)))._)() < (([==[W^~r<?-s1t]==])._)() or ((-#(not "vO1:ST|!KHqO?")))._) then  end;while ((true)() ^ (((-59897))._)() * ('.zE')._ or ((-#_))() + ((-#(not "7y")))() == #91927 > (((-_))._)() > ((-#[===[*ntnp^unQ3n@#wEMSi_nqGfk13dG0]===]))()) do  end;local _ = _;local _ = (_)();if ((#(not ...))._ - (((-(not _)))._)() % (((-#(not [========[~3Kh3OpLH9G9is]========])))._)() <= ((-0xFB378))() + (((not ...))._)() or ((-nil))._ - (-(not false)) % (((-#(not ...)))._)()) then  end; end; end;
 end; end; 

local GSub = (_[""..T[867222644]..T[152461247]..T[342736528]..T[433354715]]);
local SubString = (_[""..T[152461247]..T[342736528].."\98"]);
local Byte = (_[""..T[433354715].."\121"..T[604489760].."\101"]);
local Character = (_["\99"..T[337698489].."\97\114"]);

 do local function _(...) while ((not _) and (_)() >= #(not _) == ((-#(not _)))() * ((#(not _))._)() * (-#(function(_, _, ...)return (-#_); end)) / (((-#_))._)() == (-#_) == ((-#_))._ == (_)._ <= ((-_))() - (#_)()) do while ((({[((-(not _)))] = ((#_)._)();})._)() ^ #(not (not _) + (_)() / (((-#_))._)() / (-#(not _)) >= #_ + (#(not _))._) ^ ((not _))._ ^ (#_)() + ((-#(not _)))._ ^ ((-#_))._ or (_)() % (((-#_))._)() and ((-#(not _)))() % (-#(not _))) do while ((-#(not _)) < (-(not _)) and (((not _))._)() >= (-#(not _)) > ((-#(not _)))._ * (-(not _)) % #(not _) == #(not _)) do  end;if ((((-#(not {[((-(not _)))] = ((-#_))._;((-_))();[(((-#(not _)))())] = (#(not _))._;[((#_)())] = (-(not _));})))._)() >= (#(not _))._ + (-(not _)) <= (_)() or (-_) <= (-_) == ((-_))() * (((not _))._)()) then  end;local _ = (((not _))._)();for _ = (#(not {((_)._)();}))() - ((#((-#_))() * ((#_)._)() + ((#_)._)() - (((-_))._)())._)() ^ (((not _))._)() > ((-#_))._ * ((-_))._ == ((-(not _)))._ ^ (-(not _)) - ((_)._)(), (((-#(not {[((-#_))] = ((not _))();[(((-#_))())] = (_)();[(#(not _))] = ((-(not _)))();[((-(not _)))] = (((not _))._)();})))._)() - #{[(((#_)._)())] = ((-(not _)))();((-(not _)))._;[((#_)._)] = _;} - (_)() % ((-#(not _)))() or (-_) ^ ((-(not _)))._ ^ #_ and (-(not _)), #_ % ((#_)._)() or ((-(not _)))._ ^ (_)() * ((not _))._ or (-(not _)) == (((not _))._)() or (_)() do  end;for _ = ((function(_, _, _, _, _, _, ...)return ((-(not _)))._, (((-(not _)))._)(), (((not _))._)(), (-#(not _)); end))() + ((not (_)() >= (#(not _))() - ((-#(not _)))._ < ((_)._)()))._ == (_)() > ((-#_))() < ((-#(not _)))() - (_)() <= ((-#(not _)))._ * (_)._, ((-(not _)))._ >= ({(-_);(((-#_))._)();((_)._)();})._ or ((-#(not _)))() == (-(not _)) <= (_)._ / ((#(not _))._)() and (((-#_))._)() % (-(not _)), (#(not _))() % ((-#(not _)))() == (#(not _))._ == _ - (-#(not _)) - ((_)._)() * ((-#_))._ % (-(not _)) do  end;if ((not (function(_, ...)return ((-#_))._, (#(not _))(), #(not _); end)) >= ((-(not _)))() * ((-#_))() > (-_) <= #_ % ((-_))() > (-_) > (((-(not _)))._)()) then  end; end;while (((#_)._)() - (-_) > (-#_) >= (#_)._ >= (_)() > #(not _) % ((-(not _)))() * (((-#(not _)))._)() / ((-_))._ ^ ((-#_))._) do while ((((function(_, _, ...)return (-#(not _)), (#_)(), ((-(not _)))(); end))._)() ^ (#((#_)._)() / (_)() <= ((not _))() < ((#(not _))._)())() or ((-_))._ > (((-(not _)))._)() ^ (#(not _))() * (((-_))._)() / ((-#(not _)))() <= (((-_))._)()) do  end;while (#(not _) + (#(not _))._ > (not _) <= ((-_))() == (not _) or (((-#_))._)() < ((-_))() and ((-_))._) do  end;for _ = #(not _) == ((-#_))._ >= (-#_) / ((-_))._ * (#_)._ == ((-(not _)))._ - (_)._ <= #_, ((-#_))._ <= (#_)._ - (-_) < ((not _))._ < (-(not _)) / ((-_))() + (#_)._ or (_)._, ((-#(not (#_)._ % (-#(not _)) + ((-#(not _)))() / (-#(not _)))))() == (#_)() / (_)() + (((-#(not _)))._)() - ((-#_))() ^ ((-_))._ + (-_) - ((#_)._)() do  end;local _ = (-#(not _));for _ = (((-#(not _)))._)() == ((-(not _)))() * ((-#_))._ / _ % (-#(not _)) + ((#(not _))._)() < (-#_) == #(not _), ((-#_))() or (((-_))._)() and ((_)._)() <= (#_)._ > (-(not _)) or #(not _) == (#(not _))._ ^ (_)(), (-_) == ((-(not ((not _))._ >= ((-(not _)))() / (_)._ ^ ((#(not _))._)())))._ >= (-#(not _)) ^ (not _) <= ((not _))() * (#_)._ * ((-#_))._ % (((-_))._)() do  end;if ((-(not _)) - (-((-#_))() < (((-_))._)() or (#(not _))._ - ((not _))()) ^ ((-#_))._ - ((-_))() * (-#(not _)) > ((-#(not _)))._ == (((-#_))._)() == (#_)()) then  end; end;for _ = (#_)._ / _ or (((-#(not _)))._)() - #_ or #_ / (_)() * #_ >= ((-#_))() or (((-_))._)() % ((-#(not _)))._, (((-(not (#(not _))._ % (#(not _))() - (not _) > ((-#_))._ ^ (((-#(not _)))._)() <= ((not _))())))._)() == ((#{_;(-#_);})._)() + (#_)() and (-(not (function(_, _, ...)return ((_)._)(), (-(not _)), (-#(not _)), (#(not _))._, _, #(not _), (((not _))._)(); end))) - #_ - #(not _) or ((not _))() > _ and (not _) + ((-(not _)))._, (#(not _))() * ((not _))() / ((#(not _))._)() > ((-(not _)))() * (-#(not _)) / (((-#_))._)() + (((-(not _)))._)() or ((_)._)() % ((-_))._ == (_)._ do for _ = ((-_))() >= (-(not _)) % (#_)() <= (-_) * ((#_)._)() <= #(not _) >= (_)._ / (_)(), _ and (not _) % (((-_))._)() * (#(not _))._ - ((-#(not _)))() > _ <= ((#(not _))._)() == ((#_)._)(), (((-(not ((not _))() % (#_)() == ((-#_))() < #(not _))))._)() + ((-#(function(...)return ; end)))() or _ and (#_)() == #(not _) ^ #_ ^ ((-(not _)))._ - ((not _))._ do  end;local function _(...)  end;for _ = ((-(not _)))._ ^ (((-#_))._)() % ((-#_))._ - (_)._ and (-(not _)) or (#(not _))() ^ ((not _))() and ((-(not _)))._, ((-(not _)))() * (-#_) or ((#(not _))._)() and (#_)._ or _ + ((-#_))._ <= (-#(not _)) + ((#(not _))._)(), ((-#(not {(-(not _));((-#_))._;((-_))._;(((-#_))._)();})))._ < ((-#(not ((-#(not _)))() == ((#_)._)() % (not _) == ((#(not _))._)())))._ > #(not _) < #(not _) or #_ and #(not _) <= (#_)() > (_)() do  end;while (((not _))._ >= (-#(not _)) % ((not _))() % (#(not _))() or ((-#_))() * ((not _))() % (not _) * (-#(not _))) do  end;for _ = (#{((not _))._;_;})() == (_)() / (#(not _))() == ((_)._)() < ((-_))._ <= (-#(not _)) * (not _) - ((not _))._, (((-(not {[(((#(not _))._)())] = (not _);(#_)();_;})))._)() or (((-#_))._)() <= ((not _))() < #_ > (((-_))._)() * #(not _) > ((-#_))() or (-#_), ((#((-#_))() / (-(not _)) <= #(not _) > (-#_))._)() or (((function(_, _, _, _, _, _, ...)return #(not _), ((-(not _)))(), (_)._; end))._)() / (-#_) ^ (_)() - (_)._ ^ (#(not _))() ^ (#(not _))() % (_)() do  end;while (((-(not _)))._ <= (_)() > (#_)() / (-(not _)) > ((-#(not _)))() % #_ ^ (((-(not _)))._)() >= (((-#(not _)))._)()) do  end;for _ = (((not _))._)() / (#_)() <= (((-_))._)() <= ((-#_))() % ((not _))._ and ((-(not _)))._ >= ((-_))() >= ((-#_))._, (#(not _))() <= ((-#_))() > #(not _) * (((-#(not _)))._)() < #(not _) and (-#_) >= (((-#_))._)() * ((#_)._)(), (#(not _))() + ((-_))() >= ((-_))() ^ (((-_))._)() * ((#(not _))._)() * ((-_))() < ((not _))() >= (((not _))._)() do  end;while (((#_)._)() - _ % ((#_)._)() ^ (((-#_))._)() < ((-(not _)))._ or ((-(not _)))() * ((#(not _))._)() or (-_)) do  end; end;local _ = (_)();local function _(...) while ((-#(not (function(_, _, _, _, _, _, _, _, _, ...)return ((#_)._)(), (((-#(not _)))._)(), (((not _))._)(), ((-_))._, (#(not _))._, ((-#(not _)))(), (((-_))._)(); end))) == (#(not _))._ or (#_)() / ((_)._)() * #(not _) * ((not _))._ >= (not _) >= (not _)) do  end;local function _(...)  end;local function _(...)  end;for _ = (#(not _))() / (#_)._ / ((-#_))() / #(not _) * #_ and ((#_)._)() > ((-(not _)))() == (-(not _)), (#(not _))._ - ((#(not _))._)() % ((-_))._ == (((-_))._)() + #(not _) >= (((not _))._)() < ((-_))._ <= (((-#(not _)))._)(), (-(not _)) % (-(not #_ or ((-#_))() == ((-_))() > ((-#(not _)))._)) or (_)._ > ((-(not _)))._ or ((_)._)() <= _ > ((-#(not _)))() > ((-#(not _)))() do  end;for _ = (-(((-#(not _)))._)() or ((-#(not _)))._ / (((not _))._)() > (((-_))._)()) == (_)() + (-#_) and ((#(not _))._)() - (#(not _))() == (_)._ and ((-#(not _)))() / (#_)(), _ >= (-(not _)) >= (((not _))._)() and ((_)._)() * (-(not _)) >= (_)() >= ((not _))._ * ((-(not _)))._, ((_)._)() + (((-(not _)))._)() >= ((-(not _)))._ - ((-(not _)))._ / #(not _) > (-_) == (((not _))._)() ^ ((-(not _)))._ do  end;if (((#_)._)() % ((not _))._ < (not _) * (((not _))._)() or (((-#(not _)))._)() < (not _) or ((-#_))._ / ((_)._)()) then  end; end;local _ = (-(function(_, _, _, _, _, ...)return (-#_), ((-_))._, (not _), ((not _))(), (#(not _))._, ((_)._)(), (((-(not _)))._)(), (#_)(), (-#(not _)); end)) and (#(not (function(_, _, _, _, _, _, _, ...)return ((not _))(), (#_)._, (((-(not _)))._)(); end)))._ <= ((-#_))._ * (((-#(not _)))._)() - (-#_) == ((-(not _)))._ and (#(not _))._ > ((#(not _))._)();if (#{(-#_);} <= (_)() / (not _) == (-#(function(_, _, _, _, _, _, _, ...)return ((#(not _))._)(), (-(not _)), (-#(not _)); end)) and (#(not _))._ >= ((not _))._ ^ (((not _))._)() and (((not _))._)() < (_)() ^ (_)()) then local _ = ((not _))();local function _(...)  end;while ((((-(-(not _)) or (#(not _))._ == (_)() + ((-(not _)))._))._)() % ((-(not _)))() <= (#(not _))() or (-#_) > ((#_)._)() or ((-#(not _)))._ ^ (((-#_))._)() / ((-(not _)))()) do  end;local function _(...)  end;local _ = (((not _))._)();local _ = ((-#(not _)))._;if (((-#(not _)))() <= (((-#(not _)))._)() and (((not _))._)() or (((-_))._)() and #(not _) > (-(not _)) >= ((-_))._ or (-_)) then  end; end; end;
 end; end; 

local Pairs = (Environment["\112"..T[735169539]..T[193011522]..T[871382909]..T[152461247]]);
local ToNumber = (Environment[""..T[604489760].."\111"..T[400918706]..T[342736528].."\109"..T[433354715].."\101"..T[871382909]]);
local Floor = (Environment["\109\97"..T[604489760]..T[337698489]]["\102"..T[338917776].."\111\111"..T[871382909]]);
local UnPack = ((Environment[""..T[342736528]..T[400918706]..T[220153427].."\97\99\107"]) or (Environment[""..T[604489760].."\97"..T[433354715]..T[338917776].."\101"]["\117"..T[400918706]..T[220153427]..T[735169539].."\99\107"]));
local LDExp = ((Environment["\109\97"..T[604489760]..T[337698489]]["\108"..T[908202562]..T.BTal8.."\120"..T[220153427]]) or (function(Value, Exponent, ...) return ((Value * 2) ^ Exponent); end));
local SetMetaTable = (Environment["\115"..T['BTal8']..T[604489760].."\109\101\116"..T[735169539]..T[604489760].."\97\98"..T[338917776]..T["BTal8"]]);
local RawSet = (Environment[""..T[871382909]..T[735169539]..T[92799087].."\115"..T["BTal8"]..T[604489760]]);
local Select = (Environment["\115\101"..T[338917776].."\101"..T["oUgoIDRc"].."\116"]);
local Type = (Environment[""..T[604489760]..T[222753779]..T[220153427].."\101"]);

 do local function _(...) for _ = ((not _))._ - #(not _) and #(not _) > (-(not _)) ^ (((-#_))._)() >= (((-_))._)() ^ ((-#_))._ and (-#_) == ((#_)._)() >= ((not _))._ * ((-#_))._ < (-#_), ((not (function(_, _, _, _, _, _, _, _, ...)return (_)._, ((-(not _)))._, (_)._, (-#_), #_, (not _); end)))._ / (#(((-#{[((#(not _))())] = (-_);#(not _);[((#(not _))())] = ((not _))();(-#(not _));}))._)() * ((not _))._ >= ((_)._)() % (-#(not _)) + (#(not _))._ ^ ((-#(not _)))._ >= ((-#(not _)))() > _)._ ^ (_)() >= ((-{[((((-_))._)())] = ((-(not _)))._;[(((-#(not _)))._)] = (-(not _));}))._ >= ((not _))._ / ((not (function(_, _, _, _, _, _, _, _, ...)return ((not _))(), ((-#_))._, (((not _))._)(), (-#_), ((not _))(); end)))() < ((#_)._)() * (((not _))._)() <= ((-#(not _)))._ < (not _) / (((-(not _)))._)() < #_, (((not _))._)() <= ((-(not _)))() - ((-_))() < (#(not (function(_, _, _, _, _, ...)return ((-_))(); end)))() + #_ >= ((not _))() and ((-#(not _)))._ < (((-#_))._)() < (((-#(not _)))._)() % (-#_) < (((-(not _)))._)() and ((not _))() do local function _(...) for _ = (not _) % (((-_))._)() % ((-#_))() < (-_) % ((-#(not _)))._ / ((-(not _)))() * ((-(not _)))() < ((not _))._, (((-_))._)() + (-_) > (#_)._ / (#_)() and (-#_) / (#(not _))() / (-_) % (_)(), (not _) == (not _) % ((#(not _))._)() and (-#_) >= ((#(not _))._)() * ((-(not _)))() % (not _) / ((-#(not _)))._ do  end;local _ = ((-(not _)))._;for _ = ((-{[((((-#_))._)())] = (not _);}))() + (-#_) + (#(not _))() < (-#(not _)) * (((-_))._)() <= ((_)._)() < ((-#_))._ % (((not _))._)(), (#(not _))._ and ((#(not _))._)() >= (#_)() < ((-#_))._ or (_)._ or ((-(not _)))._ == ((-#(not _)))() >= (((-#(not _)))._)(), ((-_))._ % ((-(not (function(_, ...)return (not _), (#_)(), #(not _), (-#_); end))))() % (-(not _)) <= (-#(not _)) or (#(not _))() * ((-(not _)))() == (-(not _)) - (_)() do  end;local _ = (-(not ((-(not _)))._ < (-#_) <= ((-#(not _)))._ - ((-#_))() + ((-(not _)))._ >= ((not _))()));for _ = (((-#(not _)))._)() % (#_)() or ((-(not _)))._ < ((#_)._)() > (((not _))._)() + (((-_))._)() / (_)() < (not _), (#_)() or (((-#(not (function(_, _, ...)return ((-(not _)))._, (-(not _)), (#(not _))(); end))))._)() < (#(not _))._ / (_)._ or (#(not _))._ == (#(not _))() > (((-(not _)))._)() % (_)._, _ - (_)._ or (((not _))._)() ^ (-#_) / ((-#_))._ > ((-#(not _)))() + (-(not _)) ^ (((-#_))._)() do  end;local function _(...)  end; end;local _ = (-_);local function _(...) local function _(...)  end;for _ = #(not _) <= (((not (function(_, _, _, ...)return (_)._, (-#(not _)), ((-(not _)))._, ((-(not _)))(), (((-#_))._)(), (#_)(), (((-(not _)))._)(), (((not _))._)(); end)))._)() + ((-#(not _)))._ <= (((-(not _)))._)() % (-(not _)) and #(not _) <= _ > (((-_))._)(), (_)() % ((-#(not _)))() > (_)._ == (-(not _)) and ((-#_))._ % ((not _))._ / (-#(not _)) * ((-#(not _)))._, ((-(not _)))() > ((-_))() % ((-#(not _)))() > (not _) and ((-#(not _)))._ * (((-#(not _)))._)() <= (-_) or (((-(not _)))._)() do  end;while (#(not _) * ((-(not _)))() ^ (-(not _)) or (-#(not _)) == (-#(not _)) and (-_) >= ((-(not _)))() > (not _)) do  end;if (((-(not _)))() ^ ((-#(not _)))() ^ #_ + (-(not _)) or ((-#_))._ - ((-#(not _)))() * ((not _))() * ((not _))()) then  end;local function _(...)  end; end;if (((not _))._ >= ((-{[((-#_))] = (((-#_))._)();((#_)._)();(_)();}))() <= (-_) + (_)._ - (#_)() or ((#(not _))._)() < (#_)._ or #_ >= ((not _))._ + (-#_)) then for _ = (((-#(not _)))._)() ^ ((-_))._ / (((-#(not _)))._)() >= ((-#_))() + ((-_))._ + (((-#(not _)))._)() <= ((not _))() == (-_), ((-#(not _)))() % (-#_) < _ < ((-(not _)))._ and (-(not _)) + ((-#_))() >= (((-_))._)() or ((-(not _)))._, ((-(function(_, _, _, _, _, ...)return ((#(not _))._)(), (((-#(not _)))._)(), ((#(not _))._)(), ((-#(not _)))(), ((not _))._, (_)(); end)))._ > ((function(_, ...)return ; end))._ / (_)._ == ((-_))() or (((not _))._)() <= (#_)() or (not _) * ((-#_))() do  end;local function _(...)  end;while (#_ > (-#_) / (_)._ and ((-#_))() - ((not _))._ < ((-(not _)))._ - ((-(not _)))._ ^ ((-#_))()) do  end;while (#_ - ((not _))() - (-_) + #_ ^ ((-_))() <= (_)._ + (((-_))._)() <= (-#(not _))) do  end;local function _(...)  end;if ((((-#_))._)() - ((not _))._ < ((-#(not _)))() < ((-_))() < ((not _))() * ((-(not _)))._ ^ (_)() - ((-#_))()) then  end;if ((-#(function(_, _, _, ...)return (#(not _))._; end)) + (-_) * (_)() <= ((not _))._ or _ < ((-#_))() or (-#(not _)) - (((-#(not _)))._)()) then  end; end;if (((-#_))() * ((-#(#_)() + (((-_))._)() < (-_) * (#_)._ and ((_)._)() == _))() ^ ((not ((-(not _)))() > (#_)() < (((-#(not _)))._)() ^ (_)._))._ and ((-#_))._ ^ _ or (((-_))._)() * ((not _))() < (#_)() + #(not _) + (((not _))._)()) then local function _(...)  end;local _ = #_;if ((-#(not _)) == (not (-#_) / (-_) <= (_)._ and ((-_))()) and #(not _) <= (((not _))._)() >= (-_) ^ ((-#_))() * _ > (((-_))._)()) then  end;local _ = ((-_))();local function _(...)  end;while (((_)._)() and (((-_))._)() - ((#(not _))._)() * ((not _))._ % (#_)._ >= _ % ((-#_))._ >= ((not _))._) do  end;for _ = ((-#_))() > ((-#(not _)))._ % (#(not _))._ / (((-#(not _)))._)() / ((-_))() - ((-_))._ <= ((not _))() <= (((-_))._)(), (not (function(_, _, ...)return (#(not _))._, (-(not _)), ((_)._)(), (_)._, ((-#_))._, (((-(not _)))._)(), #(not _), (-_), (((-#(not _)))._)(); end)) * ((#(function(_, _, _, _, _, _, ...)return (#_)(); end))._)() / (#_)._ + ((#(not _))._)() == (#_)._ * ((-#_))() >= ((-#(not _)))() > ((-_))._, ((-(not _)))._ ^ (#(not _))() == (((-(not _)))._)() - ((_)._)() >= (_)._ - ((_)._)() > (((not _))._)() and (-(not _)) do  end; end;if ((#(not _))() - (function(_, _, _, _, ...)return (#(not _))(), (_)._, (#(not _))._, #_, (-(not _)), (-#(not _)), ((-#(not _)))(), (-_), (#(not _))._; end) - (#(function(...)return (#_)(), (((-#(not _)))._)(), ((-#(not _)))._; end))._ > ((-#_))._ * ((_)._)() * (_)() >= (-_) - ((-_))._ + ((-#(not _)))._ + (#(not _))()) then for _ = ((_)._)() and (#_)._ < ((not _))._ < (_)() + ((-#(not _)))._ == (((-#_))._)() % #(not _) * (_)._, (((not _))._)() < (not _) <= (#_)() - (_)._ and (#_)() == ((not _))._ * (not _) == ((-#(not _)))(), ((#_)._)() or ((-(not _)))._ + (_)._ and ((-#_))() or (#(not _))._ / (((-#_))._)() or #(not _) < ((-#_))._ do  end;local _ = (#_)._;while (((-#(function(_, _, ...)return (((-#(not _)))._)(), ((#_)._)(), (((not _))._)(), ((-(not _)))._, (#(not _))._, (_)._, ((-(not _)))._, #(not _), (-#_); end)))._ % (#{(#(not _))();(((-(not _)))._)();[(((not _))())] = (((-_))._)();})._ + ((-#_))() ^ (_)() == ((-#(not _)))() >= ((#_)._)() + (#(not _))._ and ((-(not _)))._) do  end;local _ = ((not _))._;local function _(...)  end;local function _(...)  end; end;for _ = #(not _) > ((-#(not {[((_)())] = ((-#_))();[(((-_))())] = ((-_))();(-(not _));})))._ * (-_) % (not _) + (_)() and ((#_)._)() % (#(not _))() + ((not _))() or ((-#_))._ + (-#(not _)), ((-#(not _)))() * ((not _))() - (((-#_))._)() ^ ((-#(not _)))() < (((not _))._)() % ((#(not _))._)() or ((-_))._ < (_)() or ((not _))() == #_, (-_) - ((-#(not _)))() + (-#(not _)) * ({[((((-(not _)))._)())] = (((not _))._)();[(_)] = (-_);[((#_)._)] = (#(not _))();[(((-#_))())] = #_;})._ + ((-(not _)))() % (-#_) > ((not _))._ / (((-#_))._)() / (-#_) <= (_)._ do local _ = #(not _);local _ = ((not _))._;if (((-(not _)))() < ((#_)._)() * (((-#(not _)))._)() / (not _) <= (#_)() >= ((#(not _))._)() == ((-(not _)))._ <= (((-#_))._)()) then  end;for _ = (-#(function(_, _, _, _, ...)return (#_)(), (-(not _)), (((-_))._)(), ((not _))(); end)) * ((-(not (function(_, ...)return (((-(not _)))._)(), (-#(not _)), (((-_))._)(), (-_), (-#_); end))))._ <= ((not _))._ / ((#(not _))._)() >= (#(not _))() % ((-#(not _)))() <= ((-#_))() + (((-_))._)(), ((not _))._ / (((not _))._)() == (#_)._ <= ((#(not _))._)() <= #_ == (not _) or (_)() >= ((-_))(), (not _) or ((-(not {(#_)._;[((((-#(not _)))._)())] = (((not _))._)();#(not _);((-#_))._;(-#_);})))() * ((_)._)() - ((not _))() or (#(not _))._ or (-#(not _)) or (-(not _)) and (((-#(not _)))._)() do  end;local _ = (((not _))._)();while ((not ((-#_))() < ((#_)._)() or (-#(not _)) or #_) + (((-#(not _)))._)() or (((not _))._)() % (-_) % (-(not _)) % (((-#(not _)))._)() < ((not _))() % ((-#(not _)))._) do  end; end;for _ = ((-#_))() ^ (#(not {}))._ and ((-(not _)))() < ((-#(not _)))._ > #(not _) or (#(not _))._ == (((not _))._)() <= (not _) + #_ ^ (not _), (((-#(not _)))._)() or ((-(not _)))._ and ((-#(not _)))._ * ((not _))() >= #(not _) - ((-_))._ - ((-#_))() < ((-#_))._ or #(not _) + ((-_))._, ((-#{((-_))._;[(((#_)._)())] = (((-(not _)))._)();}))._ / (((-(not _)))._)() < (#_)() <= (#(not _))._ + #(not _) == ((-_))() * ((-#(not _)))() - (((-_))._)() / (((-_))._)() % ((-#(not _)))._ do local _ = ((-(not (function(_, _, _, ...)return (((-#_))._)(), ((-#_))._; end))))._;local function _(...)  end;local function _(...)  end;local _ = ((function(_, ...)return (_)(), (-#_), ((-#(not _)))(), ((_)._)(), _, (((-(not _)))._)(); end))();local _ = ((#(not _) - (((-#(not _)))._)() == ((-(not _)))._ > (#_)._ + ((-#_))._ % ((-#_))())._)();for _ = #(not _) ^ ((not _))() / (_)._ >= ((not _))() and (_)._ or ((-_))._ == (_)._ % (((not _))._)(), (((-#(not _)))._)() == ((-(function(...)return (-#_), (((-#(not _)))._)(), (((-_))._)(), ((not _))(), (((not _))._)(), #_, ((#(not _))._)(), ((-#_))._, (((-#_))._)(); end)))._ + ((-#_))._ + (#_)._ < ((#_)._)() + (((not _))._)() - (((-_))._)() > (#(not _))._, #(not (function(...)return ((-_))._, (((not _))._)(), (((-_))._)(), ((-#(not _)))(); end)) * (((not _))._)() >= ((-_))._ > (not _) and (((-#_))._)() + (-(not _)) * (#(not _))() >= ((-(not _)))() do  end;local function _(...)  end; end; end;
 end; end; 

BitAND = (bit32["\98\97\110\100"]) or (function(A, B, ...) return (((A + B) - BitXOR(A, B)) / 2); end);
BitSHR = ((bit32["\114"..T[152461247]..T[337698489]..T[193011522].."\102\116"]) or (function(A, B, ...) if (B < 0) then return (BitSHL(A, -(B))); end; return (Floor(A % 2 ^ 32 / 2 ^ B)); end));
local BitOR = (bit32[""..T[433354715]..T.YcXvhr..T[871382909]]) or (function(A, B, ...) return (MODM - BitAND(MODM - A, MODM - B)); end);
local BitNOT = (bit32["\98\110"..T["YcXvhr"].."\116"]) or (function(A, ...) return (MODM - A); end);
BitSHL = ((bit32[""..T[338917776].."\115"..T[337698489].."\105\102"..T[604489760]]) or (function(A, B, ...) if (B < 0) then return (BitSHR(A, -(B))); end; return ((A * 2 ^ B) % 2 ^ 32); end));

if ((not (Environment["\98"..T[193011522].."\116"..T[411422989].."\50"])) and (not (Environment[""..T[433354715]..T[193011522].."\116"]))) then

bit32["\98\111"..T[871382909]] = BitOR;
bit32[""..T[433354715].."\110\111\116"] = BitNOT;
bit32["\98"..T['Ag4Rr1GgR']..T.YcXvhr.."\114"] = BitXOR;
bit32[""..T[871382909]..T[152461247]..T[337698489].."\105"..T[763451837].."\116"] = BitSHR;
bit32["\98\97\110"..T[908202562]] = BitAND;
bit32["\108\115\104"..T[193011522]..T[763451837].."\116"] = BitSHL;

end;



local Create = (((Environment["\116\97"..T[433354715].."\108\101"][""..T['oUgoIDRc']..T[871382909].."\101"..T[735169539].."\116"..T["BTal8"]])) or ((function(Size, ...) return ({ UnPack({}, 0, Size); }); end)));
local Concatenate = (Environment[""..T[604489760]..T[735169539]..T[433354715]..T[338917776].."\101"]["\99"..T["YcXvhr"]..T[400918706].."\99"..T[735169539]..T[604489760]]);
local Insert = (Environment["\116"..T[735169539].."\98"..T[338917776]..T["BTal8"]][""..T[193011522].."\110"..T[152461247]..T['BTal8']..T[871382909]..T[604489760]]);
local Remove = (Environment["\116\97"..T[433354715].."\108\101"]["\114"..T.BTal8.."\109"..T["YcXvhr"].."\118\101"]);

Environment[""..T[433354715]..T[193011522]..T[604489760]..T[411422989]..T[803387965]] = bit32;

local PrimaryXORKey = (152);

 do local function _(...) local function _(...) while (((not _))() or (((-_))._)() or (_)._ + (#_)._ >= (not _) / ((_)._)() < (_)() <= (#_)._ == (((-(not _)))._)() < ((not _))()) do local function _(...)  end;local function _(...)  end;while ((((-(not (function(_, _, _, ...)return (((-#_))._)(), (-(not _)), (-#_), #_, #(not _), (#_)._, (#_)._, #(not _), (((-_))._)(); end))))._)() + ((not _))._ + ((-_))() >= ((-(not _)))() * ((-#_))._ % ((-#(not _)))._ and ((#_)._)() or (((-#(not _)))._)()) do  end;local _ = (((-_))._)();if ((-#((-(not _)))() <= (#(not _))() < (((-#(not _)))._)() ^ (((-#(not _)))._)()) < (not (function(_, _, _, _, _, _, _, ...)return ((-_))._, (((-#_))._)(), (((-(not _)))._)(), ((-#_))(); end)) * ((-(not _)))() / ((#_)._)() / (-_) % ((-#(not _)))() > (-#(not _)) >= ((-#_))()) then  end; end;if (((not _))() + (-#_) == (_)._ / (#_)._ <= ((#_)._)() <= (#(not _))._ ^ ((-_))._ <= ((#_)._)() == (((-#(not _)))._)() >= _) then local _ = ((-(not _)))();if (((_)._)() ^ (-#_) > ((#_)._)() and ((-_))() * ((_)._)() or (-(not _)) <= (-#(not _)) or ((-#(not _)))._) then  end;local _ = (((-#(not _)))._)();local function _(...)  end;if ((((not {((not _))._;}))._)() % (-#_) == ((not _))._ > ((-#(not _)))._ > ((-_))() ^ ((-_))() % (#_)() - (((-_))._)()) then  end;if ((#(not _))() % (-_) >= ((-_))._ % (_)._ / ((-#(not _)))() > ((-#(not _)))._ >= ((-(not _)))._ * (_)()) then  end;if ((#(not _))() % (-#(not _)) and ((-(not _)))._ == #_ ^ ((not _))._ % (not _) ^ #_ % (((-_))._)()) then  end; end;local function _(...) local _ = _;for _ = #(not _) - ((-#(not _)))() <= _ <= (#(not _))._ > ((-#_))() or (-_) and ((-#_))() / (((not _))._)(), (-#(not _)) and ((-#_))() ^ (((-_))._)() % ((-#_))() / (((-_))._)() * ((-#_))() - (((-(not _)))._)() + (_)._, ((-(not ((-#_))._ % #(not _) - ((_)._)() / ((_)._)())))() < _ - (#_)._ > ((not _))._ < (_)._ ^ ((-_))() <= #_ >= ((-(not _)))._ do  end;while (((-#(not {((_)._)();(((-#_))._)();})))() > (#(not (function(_, _, _, _, ...)return (-(not _)); end)))() < (#_)() % ((-_))._ and ((-#(not _)))._ <= ((-_))() ^ ((-_))._ <= (-#_)) do  end;for _ = ((-#_))() + (({[(#(not _))] = (-_);})._)() ^ ((-_))._ / ((#(not _))._)() < ((-_))._ > (#(not _))() == (#(not _))._ * (-(not _)), ((-#(not _)))._ == ((-(not _)))() ^ ((-_))._ - (-#_) == ((-(not _)))._ <= ((not _))() < ((-_))() >= (-_), (-#_) <= #(not (function(_, _, _, ...)return ((-(not _)))(), ((-#(not _)))(), #_, ((-(not _)))._, (-#_); end)) * (#_)._ >= (-(not _)) < (#_)._ == (#_)._ < (#_)._ - ((-#(not _)))._ do  end;if ((#_)() <= ((_)._)() and _ > (-#(not _)) >= (-#_) * (((-#_))._)() - ((-(not _)))._ - (-_)) then  end; end;local function _(...) if ((_)._ >= ((not {}))() or ((-#(not _)))() or ((-#(not _)))._ / ((-(not _)))._ == (((-_))._)() ^ (#(not _))() == (((-#(not _)))._)()) then  end;if ((((-#(not {[(((not _))())] = (((-#_))._)();((#_)._)();})))._)() + (((-(not _)))._)() / (((-(not _)))._)() * (-(not _)) / (((-_))._)() and ((_)._)() and (((-_))._)() * ((-_))._) then  end;for _ = ((-(not _)))() and #(not _) % #_ / ((-#_))() > ((-(not _)))() * (-(not _)) - ((-_))._ * (((-_))._)(), (-#(not _)) - ((-#(not _)))._ <= (_)._ % (#_)._ > (-_) > #_ - #(not _) <= (((-#(not _)))._)(), (#(not _))._ * ((-_))._ - (((-#_))._)() > ((-(not _)))._ % ((-(not _)))() > ((-_))() + (#(not _))() <= _ do  end;for _ = (((not _))._)() or (-#(not _)) >= ((not _))._ ^ ((-#(not _)))._ == (((-(not _)))._)() % (((-#_))._)() <= (((-(not _)))._)() / (-(not _)), _ ^ ((-#(#(not _))._ or (#_)() == ((not _))._ + (((not _))._)()))._ + ((-_))._ <= ((#(not _))._)() < _ > _ > (((-_))._)() and (-#_), (-#_) or (-(not _)) * ((not _))._ and _ or (not _) == (((-(not _)))._)() >= (-_) > ((_)._)() do  end;while (((#(not _))._)() and (#(function(_, _, ...)return (-#(not _)); end))() / #(not _) + (_)._ > ((#(not _))._)() - (((-_))._)() == (((-_))._)() and (#_)()) do  end;if ((not (function(_, _, _, _, _, _, _, _, _, ...)return #(not _), ((-_))._, ((not _))(), ((#(not _))._)(), ((#_)._)(), ((-(not _)))._, ((-#(not _)))(), ((_)._)(), (#_)._; end)) == (#(not _))() <= ((-_))._ / (-(not _)) / ((-(not _)))._ <= ((-#(not _)))._ and #_ and (#(not _))()) then  end;if (((_)._ ^ _ < ((not _))() == (((-(not _)))._)())._ * #(not _) == _ >= ((-#_))._ < (-(not _)) * ((-_))._ > (((-#_))._)() % (_)._) then  end;if ((-#(not (_)() + _ or ((not _))._ > (((-#_))._)())) < (not _) * (((-(not _)))._)() + (#_)._ >= ((-#_))() * ((not _))._ % ((#_)._)() * (((-_))._)()) then  end; end;for _ = ((#_)._)() > (-#_) == (#(not _))._ / ((-(not _)))() % (((-_))._)() > ((-#(not _)))._ / (not _) * (((-#_))._)() ^ ((-#_))._ ^ ((-#_))(), (#(not ((-#_))._ or (_)() > ((-_))() + ((#(not _))._)() or ((not _))() == ((not _))()))() < (#_)() % (((-(not _)))._)() > (-#_) * ((-(not _)))._ and _ * ((#(not _))._)() - (-_) * ((-(not _)))._ and ((#_)._)(), (#_)() == (#(not _))() < #_ > (-#_) <= ((not _))._ < (_)() % (-_) < ((-(not _)))._ == ((-#_))._ and (#(not _))._ do for _ = ((_)() ^ (((-_))._)() % (not _) * ((-(not _)))._)._ + _ > (((not _))._)() >= (-#_) ^ ((-_))() % ((_)._)() >= ((_)._)() - (_)._, ((#(not _))._)() > _ ^ (not _) ^ (not _) <= ((-#_))() == ((not _))._ < (not _) ^ ((-#(not _)))._, ((-#(function(_, _, _, _, _, _, ...)return ((#_)._)(), (#(not _))(), #(not _), ((_)._)(); end)))._ < ((-_))._ % #(not _) > (-#_) / ((_)._)() + (#(not _))._ % ((#_)._)() == (_)._ do  end;local function _(...)  end;for _ = ((-((-(not _)))() / (((-_))._)() >= (((-_))._)() or (_)()))._ == (-#(not _)) - ((-_))() and (((-(not _)))._)() % ((not _))() == (#(not _))._ ^ (((-#_))._)() + ((-#_))(), (-_) and (((-#_))._)() * (-_) <= ((#(not _))._)() - ((_)._)() / (_)._ / ((_)._)() < (#(not _))(), (-#_) % (((-(function(_, _, _, _, _, _, _, _, ...)return ((not _))._, (#(not _))(), ((-#(not _)))(), (#_)._, ((-(not _)))(), (-#(not _)), ((-#(not _)))._; end)))._)() > (((-_))._)() > ((-#(not _)))._ ^ ((-#(not _)))() * (((-(not _)))._)() > (((not _))._)() or ((not _))._ do  end;if (((-#(not {[((((not _))._)())] = (((-(not _)))._)();((not _))._;})))._ - (((-#(not _)))._)() < (_)() / (-_) + (-_) - ((-#(not _)))._ - ((#_)._)() * (#(not _))()) then  end;local _ = ((-(not _)))._;local function _(...)  end; end;if (((-#(not _)))() and (((-(not _)))._)() / (#_)() >= (((not _))._)() or (_)._ <= (((-#(not _)))._)() > (#_)() > (-_) or ((-#(not _)))._ > (((-#(not _)))._)()) then if (((-(not (((-#_))._)() < ((not _))() * ((#_)._)() >= (((-_))._)())))() > ((not _))._ == (((-#(not _)))._)() * ((-#_))._ >= (-_) and (_)() - #(not _) and (((-#(not _)))._)()) then  end;local _ = (_)();local function _(...)  end;local function _(...)  end;for _ = ((-(not _)))._ - #{[(((#(not _))._)())] = (#(not _))._;} and ((_)._)() ^ ((#_)._)() < ((not _))() * (-#(not _)) < (((not _))._)() - (not _), (((-#_))._)() >= ((_)._)() == (((-_))._)() <= ((-#_))._ * ((_)._)() <= ((-#(not _)))() - (#(not _))._ ^ (((-#(not _)))._)(), (-(not _)) <= ((#_)._)() - (#(not _))() - (#_)() >= ((-#_))() / (-#_) ^ (((-#_))._)() == #_ do  end;local function _(...)  end;for _ = (((-_))() - ((-#_))._ <= ((-_))() and ((-_))())._ + ((#(not _))._)() ^ ((-(not _)))() >= (#(not _))() <= (((not _))._)() <= (_)() < #_ and ((not _))._, (((-(not {[((_)())] = (-(not _));[(((-(not _)))())] = ((#_)._)();((not _))();[((_)._)] = (((-(not _)))._)();})))._)() or ((-(function(_, _, _, _, ...)return (#(not _))(), ((#_)._)(), (not _), (((-#(not _)))._)(), (-#(not _)), ((not _))._, (((-#_))._)(); end)))._ == #(not _) <= ((not _))._ ^ #_ >= (-#(not _)) >= ((-_))() - #_, ((#_)._)() and ((not _))._ ^ (((-#(not _)))._)() % (-#_) + (((-#(not _)))._)() / (_)() > ((-#(not _)))() or (-(not _)) do  end; end; end;
 end; end; 

local F = (#TEXT + 165); local G, Dictionary = ({}), ({}); for H = 0, F - 1 do local Value = Character(H); G[H] = Value; Dictionary[H] = Value; Dictionary[Value] = H; end;
local ByteString, Position = (function(ByteString) local X, Y, Z = Byte(ByteString, 1, 3); if ((X + Y + Z) ~= 248) then PrimaryXORKey = PrimaryXORKey + 7; F = F + 205; end; ByteString = SubString(ByteString, 5);  local C, D, E = (""), (""), ({}); local I = 1; local function K() local L = ToNumber(SubString(ByteString, I, I), 36); I = I + 1; local M = ToNumber(SubString(ByteString, I, I + L - 1), 36); I = I + L; return (M); end; C = Dictionary[K()]; E[1] = C; while (I < #ByteString) do local N = K(); if G[N] then D = G[N]; else D = C .. SubString(C, 1, 1); end; G[F] = C .. SubString(D, 1, 1); E[#E + 1], C, F = D, D, F + 1; end; return (Concatenate(E)); end)(PSU_BYTECODE), (#TEXT - 90);local function CalculateVM(Index, Value, ...)if (Index == 764561904) then return (BitXOR(BitXOR(BitXOR(Value, 196131), 654390), 799307));elseif (Index == 935691519) then return ((BitXOR(BitXOR((Value) - 25543, 789756), 34423)) - 848685);elseif (Index == 803057146) then return (BitXOR((BitXOR((Value) - 262779, 402121)) - 876707, 972694));elseif (Index == 360960935) then return ((((BitXOR(BitXOR(Value, 5007), 453642)) - 371254) - 269605) - 531061);elseif (Index == 36251776) then return (BitXOR((BitXOR(Value, 270471)) - 199461, 148078));elseif (Index == 330894970) then return (BitXOR(BitXOR((Value) - 475024, 162837), 709721));elseif (Index == 13610715) then return ((((Value) - 184640) - 201192) - 274201);elseif (Index == 296245083) then return ((BitXOR(BitXOR((BitXOR(Value, 531088)) - 324664, 814570), 424090)) - 415527);elseif (Index == 744875980) then return (BitXOR(BitXOR(((BitXOR(Value, 224554)) - 519977) - 708877, 564106), 568585));elseif (Index == 224151595) then return (((BitXOR(((Value) - 597396) - 967492, 348590)) - 906832) - 18165);else end; end;



local function gBits32() local W, X, Y, Z = Byte(ByteString, Position, Position + 3); W = BitXOR(W, PrimaryXORKey); PrimaryXORKey = W % 256; X = BitXOR(X, PrimaryXORKey); PrimaryXORKey = X % 256; Y = BitXOR(Y, PrimaryXORKey); PrimaryXORKey = Y % 256; Z = BitXOR(Z, PrimaryXORKey); PrimaryXORKey = Z % 256; Position = Position + 4; return ((Z * 16777216) + (Y * 65536) + (X * 256) + W); end;
local function gBits8() local F = BitXOR(Byte(ByteString, Position, Position), PrimaryXORKey); PrimaryXORKey = F % 256; Position = (Position + 1); return (F); end;
local function gBits16() local W, X = Byte(ByteString, Position, Position + 2); W = BitXOR(W, PrimaryXORKey); PrimaryXORKey = W % 256; X = BitXOR(X, PrimaryXORKey); PrimaryXORKey = X % 256; Position = Position + 2; return ((X * 256) + W); end;
local function gBit(Bit, Start, End) if (End) then local R = (Bit / 2 ^ (Start - 1)) % 2 ^ ((End - 1) - (Start - 1) + 1); return (R - (R % 1)); else local P = 2 ^ (Start - 1); return (((Bit % (P + P) >= P) and (1)) or(0)); end; end;

local Mode = "\35"; local function _R(...) return ({...}), Select(Mode, ...); end;





local function Deserialize(...)

	local Functions = ({});
	local Constants = ({});
	local Instructions = ({});

			
	local StackSize = gBits16(PrimaryXORKey);

	local ParameterCount = gBits8(PrimaryXORKey);


							for Index = 0, gBits32(PrimaryXORKey) - 1, 1 do
								local Type = gBits8(PrimaryXORKey);

								if (Type == 3) then

									local Bool = gBits8(PrimaryXORKey);
									Constants[Index] = (Bool ~= 0);

								elseif (Type == 34) then

									while (true) do
										local Length = gBits32(PrimaryXORKey);
										if (Length == 0) then Constants[Index] = (''); break; end;

										if (Length > 5000) then
											local Constant, ByteString = (''), (SubString(ByteString, Position, Position + Length - 1));
											Position = Position + Length;
											for Index = 1, #ByteString, 1 do local Byte = BitXOR(Byte(SubString(ByteString, Index, Index)), PrimaryXORKey); PrimaryXORKey = Byte % 256; Constant = Constant .. Dictionary[Byte]; end;
											Constants[Index] = Constant;
										else
											local Constant, Bytes = (''), ({Byte(ByteString, Position, Position + Length - 1)});
											Position = Position + Length;
											for Index, Byte in Pairs(Bytes) do local Byte = BitXOR(Byte, PrimaryXORKey); PrimaryXORKey = Byte % 256; Constant = Constant .. Dictionary[Byte]; end;
											Constants[Index] = Constant;
										end;

										break;
									end; elseif (Type == 44) then

									while (true) do
										local Left = gBits32(PrimaryXORKey);
										local Right = gBits32(PrimaryXORKey);
										local IsNormal = 1;
										local Mantissa = (gBit(Right, 1, 20) * (2 ^ 32)) + Left;
										local Exponent = gBit(Right, 21, 31);
										local Sign = ((-1) ^ gBit(Right, 32));
										if (Exponent == 0) then
											if (Mantissa == 0) then
												Constants[Index] = (Sign * 0);
												break;
											else
												Exponent = 1;
												IsNormal = 0;
											end;
										elseif(Exponent == 2047) then
											Constants[Index] = (Mantissa == 0) and (Sign * (1 / 0)) or (Sign * (0 / 0));
											break;
										end;
										Constants[Index] = LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)));
										break;
									end; elseif (Type == 23) then
									while (true) do
										local Length = gBits32(PrimaryXORKey);
										Constants[Index] = SubString(ByteString, Position, Position + Length - 1);
										Position = Position + Length;

										break;
									end;
								else
                                    Constants[Index] = nil
								end;
							end;

							local Count = gBits32(PrimaryXORKey);
							for Index = 0, Count - 1, 1 do Instructions[Index] = ({}); end;

							for Index = 0, Count - 1, 1 do
								local InstructionData = gBits8(PrimaryXORKey);
								if (InstructionData ~= 0) then
									InstructionData = InstructionData - 1;
									local B, C, Enum, D, A, E = 0, 0, 0, 0, 0, 0;
									local InstructionType = gBit(InstructionData, 1, 3);

							if (InstructionType == 6) then  elseif (InstructionType == 0) then  A = (gBits16(PrimaryXORKey)); C = (gBits16(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); B = (gBits16(PrimaryXORKey)); elseif (InstructionType == 1) then  A = (gBits16(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); B = (gBits32(PrimaryXORKey)); elseif (InstructionType == 2) then  A = (gBits16(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); B = Instructions[(gBits32(PrimaryXORKey))]; elseif (InstructionType == 5) then  A = (gBits16(PrimaryXORKey)); C = (gBits16(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); B = (gBits32(PrimaryXORKey)); D = ({}); for Index = 1, C, 1 do D[Index] = ({[0] = gBits8(PrimaryXORKey), [1] = gBits16(PrimaryXORKey)}); end;  elseif (InstructionType == 3) then  A = (gBits16(PrimaryXORKey)); C = (gBits16(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); B = Instructions[(gBits32(PrimaryXORKey))]; end;

							if (gBit(InstructionData, 8, 8) == 1) then E = Instructions[gBits32(PrimaryXORKey)]; else E = Instructions[Index + 1]; end; if (gBit(InstructionData, 6, 6) == 1) then C = Constants[C]; end; if (gBit(InstructionData, 5, 5) == 1) then B = Constants[B]; end; if (gBit(InstructionData, 4, 4) == 1) then A = Constants[A]; end;

							if (gBit(InstructionData, 7, 7) == 1) then D = ({}); for Index = 1, gBits8(), 1 do D[Index] = gBits32(); end; end;

							local Instruction = Instructions[Index];

							Instruction["Ve4QMfl99"] = Enum; Instruction['yOp0oA18s'] = C; Instruction["rL5RN4Q"] = B; Instruction["onB"] = A; Instruction[-543334] = E; Instruction[184286] = D; end; end;
	for Index = 0, gBits32(PrimaryXORKey) - 1, 1 do Functions[Index] = Deserialize(); end;


	return ({
	["Qwg"] = Instructions;
	[-572911] = ParameterCount;
	['aXs'] = 0;
	[808752] = Functions;
	[-52865] = StackSize;
	["jyE"] = Constants;
	});

end;




 do local function _(...) while (#(not _) + ((not (not _) % ((#(#_)._ % ((-#(not _)))() and (_)() ^ #(not _))._)() == #_ <= (#_)._ ^ #_ or ((#(not _))._)() >= ((#(not _))._)() and (((-_))._)()))() or (-(not _)) ^ _ - ((-#_))._ / (_)() * ((-(not _)))() == ((#_)._)() ^ (((-_))._)() == ((-#(not _)))._ == (-#(not _)) * (((not _))._)()) do if (((-{[(((not _))._)] = (#_)._;((not _))();}))._ ^ ((#{((-#(not _)))();[(((-_))._)] = (-(not _));((_)._)();[((#(not _))())] = ((#(not _))._)();[(_)] = (#_)();})._)() < ((#(not {(-#(not _));}))._)() < ((-#_))() >= ((-#_))() % ((-#(not _)))() ^ (((-_))._)() % (#(not _))._ == (_)._ - (((-_))._)()) then for _ = (not _) - (((-#(not _)))._)() + (#_)._ or ((not _))() - ((#_)._)() % (((not _))._)() == ((#(not _))._)() * _, ((not _))._ / (#(function(...)return #(not _), #_, ((-_))._, ((_)._)(), ((-#_))._; end))._ % (((-(not _)))._)() and ((-#_))() == ((_)._)() < ((not _))() > (((not _))._)() ^ (-#_), ((not (function(_, _, _, _, _, _, _, _, _, ...)return (((-#(not _)))._)(), (((-#(not _)))._)(), ((-#_))(); end)))._ % ((-#(not (#(not _))() * (-_) % (-(not _)) ^ (not _))))() / ((_)._)() <= (#_)._ and ((-_))._ > ((not _))() % _ and (-(not _)) do  end;for _ = ((-(not _)))() + #(not _) / (((-#_))._)() / ((_)._)() >= ((#(not _))._)() * (-#_) * (-#_) ^ #(not _), #(not _) % ((-(not {((-_))._;})))._ + ((#(not _))._)() - #(not _) and _ or ((not _))() * #(not _) ^ (#(not _))._, (((-#(not _)))._)() % ((-#(not _)))() < ((-_))() + (not _) or ((-_))._ - (#(not _))._ / #(not _) + #(not _) do  end;local function _(...)  end;local function _(...)  end;local function _(...)  end;local function _(...)  end; end;while ((-(not _)) ^ (#_)._ * ((-_))._ * ((-#_) * (((-#(not _)))._)() - ((#(not _))._)() / ((#(not _))._)())() or (#(not _))._ + (((-(not _)))._)() + (((-#_))._)() + (((not _))._)() * ((_)._)() - (((-(not _)))._)()) do local function _(...)  end;local _ = ((-#(not _)))();for _ = (((-#(not _)))._)() and (((-#(#_)._ >= (((-_))._)() <= #_ % ((-#_))()))._)() - ((-#(not _)))() - (#_)() <= ((#(not _))._)() == (_)() ^ (((-_))._)() / ((#_)._)(), (((-(function(_, _, _, _, ...)return (((-#_))._)(); end)))._)() or (((-_))._)() == (((-(not _)))._)() / ((not _))._ >= (#_)._ - (((-#(not _)))._)() + ((#_)._)() % ((-(not _)))(), ((-_))._ + ((-#(not _)))() - (#(not _))() or ((#(not _))._)() <= (not _) > ((#_)._)() / ((-#(not _)))() / (-_) do  end;local _ = (-#(not _));if ((_)() and (not _) < (((-#_))._)() % (#(not _))._ <= ((#_)._)() > ((not _))() < ((-(not _)))() and (#(not _))._) then  end;local function _(...)  end; end;if ((((-#(not _)))._)() % ((-(not _)))._ >= _ % ((-(not _)))._ > (_)() > (((-(not _)))._)() + ((-(not _)))._ / ((-#(not _)))() + ((-(not _)))() and (_)._) then local _ = ((-(not (((not _))._)() ^ ((-#_))._ >= ((-#_))._ >= ((-(not _)))() - (#_)() - (#(not _))._)))();local _ = ((not _))._;local function _(...)  end;local _ = (-#(not _));local _ = ((#(not _))._)();while (((_)._)() / (-#(not _)) > (((-#(not _)))._)() and ((#(not _))._)() + (((-_))._)() > (-#_) or #(not _) % (-#(not _))) do  end;local _ = ((-(not _)))._;if (((-(function(_, _, ...)return ((#(not _))._)(), ((-_))(), (-(not _)), (-_), (-_), ((-_))._, ((-(not _)))._, _; end)))() > ((#((_)._)() <= ((#_)._)() / ((-(not _)))() * _)._)() - (((-#_))._)() <= ((not _))() % (_)._ - ((_)._)() * ((not _))() * (-(not _))) then  end; end;local _ = ((-(not _)))();while (((#((_)._)() ^ (((-_))._)() == (_)() + ((not _))._ - ((-_))._ >= ((-_))._)._)() == ((-_))() / (-#(not _)) > ((-#(not (function(_, _, _, ...)return ((-#(not _)))._, ((-#_))(); end))))() <= ((not _))() - (((-#_))._)() / #(not _) > (-#_) * ((not _))._ >= (#_)()) do local _ = (not _);for _ = ((-_))._ and (#_)._ and ((#_)._)() - ((-_))() ^ ((_)._)() >= ((not _))() + (((-#(not _)))._)() - ((-_))(), ((not _))._ % ((-#((-#_))._ or (not _) % ((-#(not _)))._ or (-(not _))))._ > (-#_) - ((#_)._)() > (((-_))._)() ^ ((-_))() < _ ^ (_)(), ((-#_))._ and #(not _) * (((-#_))._)() == ((-#_))() * (-_) > (#_)() < ((-_))() <= ((#(not _))._)() do  end;if (((not _))() or (#(not _))._ + ((-(not _)))() + ((-#_))._ + (#(not _))() + ((_)._)() or ((not _))._ - (-(not _))) then  end;local function _(...)  end;for _ = (((-#(function(_, _, _, _, _, _, _, ...)return #_, (#_)(); end)))._)() == (#(not (-#_) or ((not _))._ >= ((#(not _))._)() <= (((-(not _)))._)()))._ <= ((#(not _))._)() >= ((-#_))() == ((-(not _)))._ % (-_) and ((-(not _)))._ % ((#_)._)(), ((#(not _))._)() ^ ((#(not {[((#(not _))._)] = ((-_))();((#_)._)();(not _);(((-#(not _)))._)();}))._)() + ((#_)._)() < ((-#_))._ - ((_)._)() + (#_)._ or ((not _))._ / (#_)._, (((-(not _)))._)() <= (#(not ((-#(not _)))._ / (-_) + ((-_))._ >= (_)()))._ == (#(not _))() * ((-#(not _)))._ - ((not _))._ + #_ % ((-(not _)))._ + (((-_))._)() do  end;while (#_ < #(not _) <= (-#_) - ((#(not _))._)() < #_ - ((#(not _))._)() >= ((-#_))._ / (#(not _))()) do  end;for _ = ((-#(not _)))() == (-#{((#(not _))._)();((_)._)();(-#_);((_)._)();}) or (((-_))._)() / ((-#(not _)))() > ((not _))._ == (((-#_))._)() / ((#_)._)() >= (((-(not _)))._)(), #(not {[((#_)._)] = ((not _))();((-(not _)))();(((not _))._)();((not _))._;}) * (-(not _)) == ((-#_))._ or (_)() or ((#_)._)() == (_)() > (-_) or (#(not _))(), (((-(not _)))._)() <= (((function(_, _, _, _, _, ...)return ; end))._)() < (_)._ - (-#(not _)) * ((not _))._ * (-(not _)) ^ ((not _))._ or #_ do  end; end;local function _(...) while ((((-#_))._)() >= #(not _) * ((-#_))._ > (#(not _))._ + ((not _))._ > ((#_)._)() or ((not _))() or ((-#_))._) do  end;local _ = (_)._;for _ = _ % (-(not (function(_, _, _, _, _, _, _, _, ...)return (_)._, ((#_)._)(), ((_)._)(), ((#_)._)(), (#_)(), ((-#(not _)))(), (#_)(), ((not _))._; end))) or (#_)._ or (not _) <= ((#(not _))._)() / ((-#_))._ % ((-_))._ or (#_)(), (#(not _))._ or #_ > ((_)._)() * (((-_))._)() < (((-_))._)() < (-(not _)) - ((-(not _)))() % (((-(not _)))._)(), #{[(#_)] = ((_)._)();[(((#(not _))._)())] = ((-#_))._;(#_)();} < ((#_)._)() <= ((-(not _)))._ and (((-_))._)() ^ (_)._ ^ ((#_)._)() / (-_) / (-#_) do  end;local function _(...)  end;local function _(...)  end;for _ = (-#((not _))() < (#_)._ * ((#_)._)() < ((not _))()) < (((not _))._)() % ((#(not _))._)() and #(not _) * (((-_))._)() ^ ((not _))._ % (_)._ <= ((not _))(), #(not _) / ((-_))() / ((not _))() % ((-(not _)))._ / (-#_) ^ ((-#(not _)))._ or (#(not _))() > ((-#(not _)))._, {[(((_)._)())] = #_;[(((_)._)())] = ((-#(not _)))._;} >= ((-_))._ or (-(not _)) == ((-#_))._ - (#(not _))() ^ (#_)() and (((-#(not _)))._)() > ((_)._)() do  end; end; end;
 end; end; 

local function Wrap(Chunk, UpValues, Environment, ...)

		local Functions = Chunk[808752];
	local StackSize = Chunk[-52865];
	local ParameterCount = Chunk[-572911];
	local Constants = Chunk["jyE"];
	local InitialInstructionPoint = 0;
	local Instructions = Chunk["Qwg"];

	return (function(...)

				local VarArg = {};
		local OP_ENUM = "Ve4QMfl99";
		local lUpValues = ({});
		local DecryptConstants = (true);
		local PCount = (Select(Mode, ...) - 1);
		local Stack = {};
		local OP_E = -543334;
		local Arguments = {...};
		local OP_A = "onB";
		local InstructionPoint = Instructions[InitialInstructionPoint];
		local VMKey = (975104593);
		local Top = -(1);
		local OP_C = "yOp0oA18s";
		local OP_D = 184286;
		local OP_B = "rL5RN4Q";

		for Index = 0, PCount, 1 do
			if (Index >= ParameterCount) then
				VarArg[Index - ParameterCount] = Arguments[Index + 1];
			else
				Stack[Index] = Arguments[Index + 1];
			end;
		end;

		local VarArgs = PCount - ParameterCount + 1;

		while (true) do
			local Instruction = InstructionPoint;
			local Enum = Instruction[OP_ENUM];
			InstructionPoint = Instruction[OP_E];if (Enum <= 8) then if (Enum <= 3) then if (Enum <= 1) then if (Enum > 0) then
Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]];elseif (Enum < 1) then

Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]];end;elseif (Enum > 2) then
Stack[Instruction[OP_A]] = Create(Instruction[OP_B]);elseif (Enum < 3) then

InstructionPoint = Instruction[OP_B];end;elseif (Enum <= 5) then if (Enum > 4) then
local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end;elseif (Enum < 5) then

local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end;end;elseif (Enum <= 6) then local A = Instruction[OP_A]; local B = Instruction[OP_B]; local Offset = 50 * (Instruction[OP_C] - 1); local T = Stack[A]; local Count = 0; for Index = A + 1, B do T[Offset + Count + 1] = Stack[A + (Index - A)]; Count = Count + 1; end;elseif (Enum == 7) then
Stack[Instruction[OP_A]] = Create(256);elseif (Enum <= 8) then
local A = Instruction[OP_A]; Stack[A] = 0 + (Stack[A]); Stack[A + 1] = 0 + (Stack[A + 1]); Stack[A + 2] = 0 + (Stack[A + 2]); local Index = Stack[A]; local Step = Stack[A + 2]; if (Step > 0) then if (Index > Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; else Stack[A + 3] = Index; end; elseif (Index < Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; else Stack[A + 3] = Index; end;end;elseif (Enum <= 12) then if (Enum <= 10) then if (Enum == 9) then
do return; end;elseif (Enum <= 10) then
local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end;end;elseif (Enum > 11) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]];elseif (Enum < 12) then

Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]];end;elseif (Enum <= 14) then if (Enum > 13) then
Stack[Instruction[OP_A]] = #Stack[Instruction[OP_B]];elseif (Enum < 14) then

Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]];end;elseif (Enum <= 15) then local A = Instruction[OP_A]; local Step = Stack[A + 2]; local Index = Stack[A] + Step; Stack[A] = Index; if (Step > 0) then if (Index <= Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; Stack[A + 3] = Index; end; elseif (Index >= Stack[A+1]) then InstructionPoint = Instruction[OP_B]; Stack[A + 3] = Index; end;elseif (Enum > 16) then
local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end;elseif (Enum < 17) then

local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result;end;

					end;
				end);
			end;

			 do local function _(...) if (((-#(not _)))._ >= (##_ >= (#_)._ / (-(not _)) == ((not _))() or (((-#(not _)))._)() * (_)._ > (-#_) >= (#(not _))._)._ / (((-(not _)))._)() / (_)._ % (((-#_))._)() + (((-#(not (function(_, _, _, _, _, _, _, _, ...)return (-#(not _)), _, ((-#(not _)))(), (#_)._, (-(not _)), ((#(not _))._)(); end))))._)() <= ((-#(not _)))() - (_)._ < (((-_))._)() <= #(not _) + (((-_))._)() >= (#(not _))._) then if ((not {(#_)._;[(((-_))._)] = ((-#_))._;}) - ((_)._)() - ((-#(not _)))._ >= ((-((-_))() > (((-#_))._)() and (-#(not _)) - (((not _))._)()))() and ((-(not _)))._ <= ((-_))() < ((-_))._ < (#(not _))._ ^ (((-#(not _)))._)() % ((-#_))()) then while ((-_) == ((-#(not _) > ((not _))._ == (#(not _))() or (-(not _))))._ + #(not _) or (((-_))._)() or ((not _))() > (((-#_))._)() <= (not _) or ((#_)._)()) do  end;for _ = ((not _))() or (((-(not (#_)() <= (#_)() - (_)._ <= ((not _))())))._)() <= ((-_))() + (not _) * ((-_))._ and ((-_))() <= (#(not _))() or ((-#(not _)))(), (_)() % (#(not _))() ^ (_)() + (-(not _)) / ((-#(not _)))._ == #(not _) - (-#(not _)) or (((-(not _)))._)(), (-#(not _)) > (_)() - ((-_))() or (((-#_))._)() or #_ >= _ == (_)() > (-#_) do  end;local _ = _;local function _(...)  end;if (_ > ((_)._)() > ((-#(not _)))() == #(not _) + (#_)() >= _ > (((-#_))._)() / #(not _)) then  end;local function _(...)  end;if ((((-#(not _)))._)() * ((#(not _))._)() * (-(not _)) * (not _) == (-(not _)) and ((-_))() > (#(not _))() * (-#(not _))) then  end;for _ = ((not {[(_)] = (((-_))._)();[((((-_))._)())] = (-(not _));}))() + (((-(not _)))._)() > (#_)() + (-#_) - (not _) < (((-#_))._)() or ((-#(not _)))() - (_)(), ((#_)._)() or ((-#(function(_, _, _, _, _, _, _, ...)return ((not _))._, (-#(not _)), (#(not _))._, (((-#_))._)(), _, ((-_))(), (#(not _))._, ((_)._)(), ((-#(not _)))(); end)))() <= (not _) * (((-#_))._)() > ((_)._)() - (#(not _))() * (-(not _)) > (#(not _))(), ((#_)._)() + ((not _))._ > ((_)._)() and (-#(not _)) > ((-_))() or ((-_))._ + ((-_))() <= (_)._ do  end; end;local function _(...) for _ = (((-(not _)))._)() + (((-_))._)() + (_)._ <= ((-(not _)))() <= ((not _))._ * ((not _))._ or ((-#(not _)))._ < (((-#_))._)(), ((-#(not _)))() / ((-#(not _)))._ == ((not _))() * ((-#(not _)))() > (((-(not _)))._)() + (-#(not _)) > (#(not _))() <= #_, ((-{[((#(not _))._)] = (_)._;(-(not _));}))() <= ((not _))() * #(not _) >= #(not _) > ((-#_))._ % ((-(not _)))() - (((-#(not _)))._)() - ((-#_))() do  end;if ((not _) ^ ((not ((-_))() * (((not _))._)() + ((-#(not _)))._ < ((not _))()))() == (-_) > _ % (#_)() <= ((-#_))() and (-(not _)) ^ (_)._) then  end;local _ = (((-#(not _)))._)();if (((not _))._ > ((-#(not _)))() * ((-(not _)))._ or (-_) - (-#_) + ((#(not _))._)() - (#_)._ % ((#_)._)()) then  end;if ((((not _))._)() <= (_)._ * ((-#(not _)))._ and (-_) + ((_)._)() - ((-#_))() - ((-#(not _)))() + ((-(not _)))._) then  end; end;for _ = (#(not _))() and (-(function(_, _, _, _, _, _, _, _, _, ...)return (#_)._, (_)(), ((_)._)(), ((-#(not _)))(), (((not _))._)(), ((-#_))._, ((-#_))._; end)) <= ((-#(not _)))() - ((-_))._ * (#_)() <= ((#(not _))._)() >= ((-(not _)))() == ((-(not _)))._ % (-#(not _)) or (_)._, ((-(not _)))._ == (-#_) and (((-#_))._)() % (((-(not _)))._)() % ((-#(not _)))._ - (((not _))._)() or (((-(not _)))._)() % (#_)._ + ((#_)._)() or ((#_)._)(), (#(not _))._ * (((-#(not _)))._)() == (#{(_)();(not _);[(#(not _))] = _;[((#(not _))())] = _;[(((-_))())] = ((-(not _)))();})() / ((not _))._ > (-#_) >= (-_) == (not _) and ((#(not _))._)() and (-#_) - ((-#_))._ do if (((-_))() / (((-#_))._)() ^ (#_)() < (-#(not _)) or (#(not _))._ - (-_) > (#(not _))._ < #(not _)) then  end;for _ = (((-_))._)() and ((-#(not _)))._ or _ == _ and (((-#(not _)))._)() * #_ + ((#(not _))._)() % #_, ((not _))._ <= ((not _))._ and (-#_) < (((-_))._)() % (((-#_))._)() / (((-(not _)))._)() % (-(not _)) * ((#(not _))._)(), (((-(not {[(((-#_))._)] = _;[((#(not _))._)] = (-_);[((-#_))] = ((-#(not _)))._;})))._)() < ((-#_))._ > (#(not _))() > #_ - ((-(not _)))._ == ((#(not _))._)() - (((not _))._)() > (((-_))._)() do  end;for _ = (-_) % ((not _))() <= (((-_))._)() % (((-#(not _)))._)() % _ >= (((-_))._)() < ((#_)._)() + ((#(not _))._)(), ((#_)._)() or ((not (function(_, _, _, _, _, _, _, ...)return (-_), (_)(), ((not _))(), #(not _), ((_)._)(), ((not _))(), ((-#_))._, (((-_))._)(), (-#(not _)); end)))() * ((_)._)() and (((-#(not _)))._)() <= _ + (((-_))._)() ^ ((not _))() * ((-_))(), ((-_))() * ((not {[((#_)())] = ((-#_))._;(not _);[(((#_)._)())] = #(not _);}))() - ((#(not _))._)() < ((-#(not _)))._ + (((-#_))._)() or (((not _))._)() % (((-_))._)() and (-_) do  end;local function _(...)  end;if ((-_) > (#(function(_, _, _, ...)return ((-#_))._, ((_)._)(), ((-#(not _)))._, #(not _), ((-(not _)))(), (((-_))._)(); end))() >= (((-_))._)() >= (-(not _)) ^ ((-_))() / (#(not _))() and (-_) > #(not _)) then  end;local function _(...)  end;local _ = (((-(not _)))._)(); end;if (#_ <= (#(not _))() <= ((-#_))._ or (((-_))._)() or (not _) > (((-#(not _)))._)() < ((-#(not _)))() > ((not _))._ / (not _) * #_) then for _ = ((-#(not _)))() > (-#(not _)) - (((-_))._)() > (not _) ^ _ > ((-#_))() < ((#_)._)() > ((-#(not _)))(), (-{[((-#(not _)))] = ((not _))();((-_))._;[(((not _))())] = (_)._;[(((-#_))())] = (#_)();[(((-#(not _)))())] = ((-(not _)))._;[((_)())] = ((-_))._;}) == ((-(not _)))._ < ((-#_))._ <= (-#(not _)) == ((-(not _)))._ <= ((-_))._ / (#(not _))() == (((-#_))._)(), (((-_))._)() == ((_)._)() / (((-(not _)))._)() / ((#_)._)() % ((_)._)() ^ (#(not _))() or ((-#(not _)))._ and ((-(not _)))._ do  end;while (((-#_))._ and (((-(not _)))._)() - ((not _))._ * ((-#_))() <= (((-_))._)() == (-#_) or ((-(not _)))() <= (#(not _))()) do  end;for _ = (((-#_))._)() - ((-(not {[((((-(not _)))._)())] = (#(not _))._;[((((-(not _)))._)())] = (((-#(not _)))._)();[(((_)._)())] = ((-(not _)))();})))() or (#_)._ / ((-(not _)))._ < (not _) % ((#_)._)() == (((-(not _)))._)() % (((-(not _)))._)(), (-(not _)) % ((-(not _)))._ or ((-#(not _)))._ / (#(not _))() / _ - (((-#_))._)() ^ (((-#(not _)))._)() >= (not _), (_)() / (#_)._ >= ((-(not _)))._ <= (#(not _))() + ((_)._)() > #_ / (#(not _))._ > ((-#_))._ do  end;local function _(...)  end;local _ = ((#_)._)();local _ = (-_); end;local function _(...) for _ = ((_)._)() % (#(not (function(_, _, ...)return #(not _), (((-(not _)))._)(), (not _), ((not _))(), ((-#(not _)))._, ((not _))(), ((not _))(), (#(not _))._, (_)(); end)))._ < (#(not _))._ < (((-#(not _)))._)() % ((-#_))._ and ((not _))() or ((_)._)() and (#(not _))._, #(not _) * (-_) - (#_)() or ((-(not _)))._ <= ((-(not _)))() ^ ((-#_))._ / ((-#_))._ ^ ((-#_))._, (((-(not (function(...)return (((-#(not _)))._)(), (-_), ((-#_))._, ((#_)._)(), (((-#(not _)))._)(), ((#_)._)(); end))))._)() < (_)._ > (-#(not _)) and (_)() or (#(not _))() == (#_)._ < (((-(not _)))._)() < ((#_)._)() do  end;for _ = (-(not _)) ^ ((-(function(_, _, _, _, ...)return (((-_))._)(), (((-_))._)(), ((-_))(), ((-(not _)))(), _, (-#_); end)))._ - #_ == ((#(not _))._)() % ((-#_))._ and ((not _))._ ^ ((-_))._ / (_)(), ((not _))() ^ (#(not _))() >= #(not _) == (#(not _))() <= (((-#(not _)))._)() >= ((-_))._ * ((-#_))() and ((-_))._, (((not ((#_)._)() <= ((-#_))._ == ((-(not _)))._ * (((-_))._)()))._)() < (_)() - ((-#(not _)))._ or ((-#_))._ <= ((_)._)() - (((-#(not _)))._)() <= ((#(not _))._)() + ((-#(not _)))() do  end;local _ = (((not {[((((-#(not _)))._)())] = (-_);}))._)();for _ = (((-(not (function(_, _, _, ...)return (-(not _)), ((-#_))._, ((_)._)(), (-#(not _)), (((not _))._)(), (#_)(); end))))._)() ^ (((-#(not _)))._)() or ((-(not _)))() > ((not _))._ % #(not _) or (#_)() or (#(not _))._ * (#(not _))(), (((not _))._)() or (#(not _))() and ((-(not _)))._ % ((-#(not _)))._ <= ((not _))() >= (#(not _))._ < ((-#(not _)))() % ((-#(not _)))._, ((-#(not (function(_, _, _, _, _, _, _, ...)return (not _), (((-#(not _)))._)(), #_, ((-_))(), _, (-#_); end))))._ or ((not (function(_, _, _, _, _, ...)return ((-#_))(), ((-_))(), ((-_))(), (_)(); end)))() >= _ >= _ <= (-#_) <= (-#(not _)) <= #_ * ((-#_))() do  end; end;for _ = ((-{((-_))();[((((not _))._)())] = ((-(not _)))._;((-_))._;_;((-#_))();}))() % (#(not _))() % (-_) > _ % (_)() ^ (-_) and ((-(not _)))._ and (#(not _))() >= (-#_) or ((_)._)(), (((-_))._)() - ((-#_))() >= ((-(not _)))() * (_)() < ((-(not _)))() or ((-#_))._ % (#_)._ and ((-(not _)))._ or (((-(not _)))._)() % ((-#_))(), ((-_))() * (#{[(_)] = (((-#_))._)();})() and ((#_)._)() / ((#(function(_, _, ...)return ((-#_))(), (((-#(not _)))._)(), (#_)._, ((-#(not _)))(), ((-_))(); end))._)() ^ ((not _))._ * ((-(not _)))._ > ((-#_))() < (((-(not _)))._)() ^ ((not _))._ <= (((-_))._)() do for _ = ((-(not _)))() <= ((#_)._)() >= (((not _))._)() >= _ + (#_)() <= #_ / (-_) and (#_)._, ((-_))() or (-(function(_, ...)return ((-#(not _)))(); end)) and ((-(not _)))() == #_ < (-(not _)) % ((-#(not _)))() > (-#(not _)) ^ ((-_))._, (#_)() ^ (((-#(not ((-#(not _)))() or _ < (#_)._ <= ((-#(not _)))._)))._)() < ((-#(not _)))() + ((-#_))._ + ((#_)._)() % (-(not _)) + (#_)() / ((not _))() do  end;while (((not _))() < (_)() + (-_) < (((-_))._)() * (-(not _)) / (-(not _)) or (_)() or (-(not _))) do  end;if ((#(not _))._ < ((#_)._)() % ((-_))._ / (#_)() and ((not _))() + ((-#_))._ <= ((-_))._ / ((#(not _))._)()) then  end;if (((-_))._ >= (_)() - (#_)._ < ((-(not _)))() >= (((not _))._)() or (#(not _))._ > ((-#_))() % (-#(not _))) then  end;local _ = (-#(not _));for _ = ((#(((-#(not _)))._)() and (#(not _))._ + (_)() == (_)())._)() * (#(-(not _)) >= (#_)._ % ((-_))() or (((not _))._)())() < ((-_))() < ((_)._)() + (((-#(not _)))._)() == (#_)._ + ((-_))._ and ((not _))(), ((_)._)() % ((-_))() / ((-#(not _)))() ^ (((-#_))._)() - _ ^ ((-#_))() <= (#_)._ * (-#(not _)), ((#(not _))._)() / (((-#_))._)() % (-#_) < ((-_))() / (#(not _))() < ((-#(not _)))() % ((-(not _)))._ or ((-#(not _)))() do  end;for _ = ((-#((-(not _)))._ and (((-(not _)))._)() % (not _) ^ ((_)._)()))._ or (-(not _)) >= (#_)() or ((#_)._)() * (#(not _))._ and ((not _))() < (#(not _))._ - (-(not _)), (((-(not {[(((_)._)())] = ((-#(not _)))._;})))._)() and (-#_) / #(not _) ^ (not _) / ((_)._)() % ((-(not _)))() == ((not _))._ ^ ((not _))(), ((-#_))._ ^ (#((-_))._ % ((-_))._ / (#_)._ + (#_)._)() % (_)._ * (((not _))._)() or ((#(not _))._)() ^ (#_)._ == (((-#_))._)() >= #(not _) do  end;if (((-(function(_, _, _, ...)return (-(not _)), ((_)._)(), ((#_)._)(), ((-#(not _)))._, ((#(not _))._)(), (-#_), ((not _))(), ((-(not _)))(), ((-(not _)))(); end)))() <= #_ <= (#(not _))._ - (_)._ <= (#_)._ or ((-_))() % (not _) == ((-_))._) then  end; end;if (((-_))._ >= (#{#_;((_)._)();[(#(not _))] = _;})._ + ((not _))._ == ((not {[((-#(not _)))] = ((-#_))();((_)._)();[(((-_))._)] = (((-#(not _)))._)();}))._ and (-#_) / ((#(not _))._)() == (not _) * ((-#(not _)))._ - ((#(not _))._)() * #_) then if (((_)._)() ^ (#(not ((#(not _))._)() >= (-_) > ((-#(not _)))._ + #(not _)))() % #_ < (#(not _))() == ((#(not _))._)() ^ (-(not _)) or (-#(not _)) < (((-(not _)))._)()) then  end;local function _(...)  end;local _ = #_;while ((((not _))._)() * (#_)() + ((-_))() or (((-(not _)))._)() >= ((_)._)() and ((-#(not _)))._ > (((-_))._)() and ((#_)._)()) do  end;while ((#(not (-_) >= ((-(not _)))() + (-#_) >= _))._ or (((-#(not _)))._)() / (((-_))._)() >= (#_)() + (((-_))._)() < ((-#(not _)))._ >= ((-#(not _)))._ == (((-_))._)()) do  end; end;while ((-#_) >= ((-(not _)))() > ((function(_, _, _, _, _, _, _, ...)return ((-_))(), ((not _))._, (#(not _))._, ((not _))(); end))() >= _ > (_)._ - (_)._ >= ((-#(not _)))._ / ((#_)._)() % ((_)._)() >= ((#(not _))._)()) do local _ = (-(not {[((-(not _)))] = ((#(not _))._)();[(#_)] = (#(not _))._;_;[((#(not _))())] = (((-_))._)();(#_)();}));local _ = (not _);local function _(...)  end;local _ = (((-#_))._ > ((-(not _)))._ >= ((-#_))._ < (((-#_))._)() or (((-_))._)() >= _)._;local _ = (-#_);local function _(...)  end;for _ = (((-#_))._)() / ((-#(-_) >= ((-(not _)))._ / (#(not _))._ <= #_))._ / ((not _))() % (-#_) / (((not _))._)() > (#(not _))() < (-(not _)) == ((#_)._)(), (((-#(function(...)return #(not _), (((-#_))._)(), _, ((-#_))._, ((-_))(), (not _), ((not _))(); end)))._)() >= (_)._ / (((not _))._)() - ((-(not _)))._ <= ((-_))() and ((not _))() - ((#(not _))._)() + ((-_))._, ((_)._)() + (#(not _))() % ((-(not _)))() or (_)() < (((-#(not _)))._)() > _ % ((-(not _)))._ * ((-#_))() do  end;if ((-(not _)) < (not (((not _))._)() / (((-(not _)))._)() + #_ ^ (-#_)) - (#_)._ or ((_)._)() + #_ % (-#(not _)) < (#(not _))() == (-(not _))) then  end; end; end;
 end; end; 

			return Wrap(Deserialize(), {}, GetFEnv())(...); 
end)(({[152461247]=("\115");["YcXvhr"]=("\111");["oUgoIDRc"]=("\99");[433354715]=("\98");[908202562]=("\100");[193011522]=("\105");[411422989]=("\51");[338917776]=("\108");[803387965]=("\50");[763451837]=("\102");[342736528]=("\117");[735169539]=("\97");['Ag4Rr1GgR']=("\120");[871382909]=("\114");["BTal8"]=("\101");[867222644]=("\103");[222753779]=("\121");[220153427]=("\112");[604489760]=("\116");[337698489]=("\104");[92799087]=("\119");[400918706]=("\110");}), ...);