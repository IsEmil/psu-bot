return (function(T, ...) local TEXT = "This file was obfuscated using PSU Obfuscator 4.0.A | https://www.psu.dev/ & discord.gg/psu"; 

local GetFEnv = ((getfenv) or (function(...) return (_ENV); end));
local Storage, _, Environment = ({}), (""), (GetFEnv(1));

local bit32 = ((Environment[""..T[624777545]..T[947005581]..T[709001449]..T.pB1md9xH.."\50"]) or (Environment[""..T[624777545].."\105\116"]) or ({}));
local BitXOR = (((bit32) and (bit32["\98"..T[498880721]..T[435417071]..T[684839498]])) or (function(A, B) local P, C = 1, 0; while ((A > 0) and (B > 0)) do local X, Y = A % 2, B % 2; if X ~= Y then C = C + P; end; A, B, P = (A - X) / 2, (B - Y) / 2, P * 2; end; if A < B then A = B; end; while A > 0 do local X = A % 2; if X > 0 then C = C + P; end; A, P =(A - X) / 2, P * 2; end; return (C); end));

local MOD = (2 ^ 32);
local MODM = (MOD - 1);
local BitSHL, BitSHR, BitAND;

 do local function _(...) local function G(...) local function D(...) for U = (#Y).Y / ((-(not {[(((-#(not g)))())] = (((-#I)).W)();(-#(not D));[(((not R)).a)] = #D;((-#(not A)))();}))).F and ((#Q).I)() >= (S).E <= ((#d).T)() % #(not J) % ((t).e)() == (-#(not S)), (((-{(D).x;[(((-V)).K)] = ((not R))();})).T)() > (((not (function(i, y, G, w, d, t, c, Q, ...)return (-#S), (((-z)).l)(), (((not X)).v)(), ((-#D))(), (n)(), (((-(not r))).T)(), ((-(not d))).s, (((not h)).U)(); end))).D)() / ((-(not G))).y % (((-#(not D))).l)() and (((-#(not I))).U)() >= (((-#b)).P)() * Q < ((-#(not u))).n, ((-(not R)))() <= ((not c))() < ((O).j)() ^ (#(not D)).O and (not t) > (-#x) ^ ((not n)).j ^ (w).y do  end;if ((((-#(function(k, S, ...)return (r)(), (-W), ((-#v)).W, ((not D)).n, ((#(not j)).n)(); end))).b)() == ((-#(((-#I)).N)() - ((#(not r)).o)() == ((-#(not J)))() * (-#T)))() ^ (#W).O + ((W).n)() < (((not G)).r)() > ((-v)).P <= ((#W).J)() or ((#(not g)).e)()) then  end;if (((-e)).S > (not T) and (#O)() <= ((-#r)).B >= (((-(not G))).G)() ^ (((-(not C))).i)() == (#r).t ^ (((-#S)).t)()) then  end;for Z = (((-#G)).w)() ^ o > (#(not j)).F < ((-#c))() * (#(not Q))() and #f and ((-#A)).D <= (((-(not x))).J)(), #(not l) ^ ((-I)).c - (#A)() <= ((r).O)() + (#(not O)).D <= (#(not S)).V == ((not U)).e - ((-#n)).O, (n)() * (#(not u))() / (y).I >= ((-#(not G)))() - (G).i ^ (((-(not J))).c)() or (#(not J))() - ((-#(not W)))() do  end;local v = (((not c)).x)();local z = ((#(not {[((-c))] = ((not Q)).M;[((#i).y)] = (r)();(n)();})).H)();while ((O)() and (((-#v)).f)() / ((V).l)() - #j - (((-#X)).u)() < #v % ((-(not m))).D or ((-#l))()) do  end; end;for H = ((not {(-C);#f;}))() * (((-#a)).V)() / (-#r) / (-(not q)) < ((not W)).j < ((-O)).v / (((-#(not e))).W)() / (w)() or (((-#G)).o)() == ((K).m)(), (#K)() % (#(not D)).p < (((not s)).Z)() >= (-#G) <= ((-#i)).F ^ (((-#(not n))).z)() / (((not W)).C)() >= ((-#b)).r - (-(not j)) < (#H)(), ((-#X))() * (#(function(u, X, h, ...)return (((-#(not r))).V)(), ((not M)).u; end)).G <= (((-(not q))).O)() or (-#(not j)) < (((-#C)).w)() / (((-(not h))).m)() > ((not z)).v > #L and ((#(not G)).b)() < ((p).I)() do while ((((-#X)).V)() == ((-M))() <= n <= ((not I)).m ^ (-i) * (-I) > ((-(not N))).r + (#(not a))() + ((-z)).K > (((-(not E))).l)() <= W) do  end;for P = ((-#o)).l == (((-#(not (#(not G)).b < (#(not M)).c - (#(not Z))() + ((-N)).T))).I)() + ((#H).u)() == #g * (#(not r)).r + (#e)() or ((-U))() + ((-#S)).e, (#(not G)).r - (({((-X))();[((-(not u)))] = (#X).H;#x;[(((-#V))())] = (((-#(not j))).Z)();[((((-#(not Y))).D)())] = ((b).M)();[((#(not L))())] = ((-(not T))).T;[((-#(not e)))] = #(not O);}).U)() > ((#G).n)() or (((not m)).a)() ^ #(not A) and (-#V) or (-G) * ((-#(not g)))(), (-(not H)) ^ (((-(not b))).D)() - (#(not O)).B ^ ((-#(not H))).u < ((#R).q)() % ((#(not n)).E)() < (#(not O)).y ^ (((not w)).K)() do  end;local Z = (((not R))() > #(not v) == ((-(not S))).n % (D).A == (x).w >= (((-J)).m)())();for m = ((-#(not o))).a == ((-J))() == (#(not P)).Z * ((-(not X)))() * o * (D).K / ((-#(not G))).m >= ((-C)).N, (((-#{(-#Q);[((-(not J)))] = ((-#(not u)))();})).l)() ^ ((-{(y)();}))() and (not V) + P == ((-#(not c)))() or (-#(not X)) + ((-#(not c)))() <= ((-#P)).E, (E)() ^ (-#f) == ((-#c))() ^ ((-R))() >= ((#Q).Q)() - ((-E)).h + #e / (((-(not W))).M)() do  end;local function E(...)  end;local d = (((-#(not ((-(not M))).e % (#(not G))() ^ ((not w))() % ((-(not n))).a ^ ((-#(not R))).K + (((-#(not L))).p)()))).n)();local e = (((-(function(E, n, E, p, d, N, ...)return (#X)(), (((-(not f))).T)(), (#v).n, ((-(not Y))).w, ((-I))(), ((-#g))(); end))).o)(); end;if (#Y > (-r) % #G and ((-r)).N <= (#(not n)).N == (-W) < ((#(not D)).a)() ^ (-(not w)) * (-#E) or ((-#G))()) then for U = ((#(not D)).f)() * #Q >= (not i) > (((-Q)).n)() / (G)() < ((not p)).l ^ (not b) / #z, ((-o))() < ((not t)).g / (-#x) * ((-g))() >= (((not N)).X)() == (((-(not n))).e)() % ((-#(not x))).G - ((-(not b)))(), ((#(-#(not G)) and (#(not u))() == ((-(not v)))() == ((not Q)).c).A)() <= ((-#Y))() / (((-(not Q))).W)() - ((-(not Z))).B ^ (-Z) * (G)() + ((-#(not N))).V >= ((-#(not c))).k do  end;if ((#(not (function(z, M, m, E, F, Q, ...)return (-h), ((-#(not s))).o; end))).t + ((-((#(not c)).W)() * ((-#(not J)))() ^ #X >= (#w).R))() / (not W) == ((S).L)() + (-#V) / ((-#r))() + ((#(not e)).s)() or (#M)()) then  end;while ((#(not {((-q))();}))() >= (-#t) ^ (-#P) - ((-(not n))).o > (((-#w)).Z)() / #A ^ ((-a))() > (((-x)).E)()) do  end;if ((((-(function(m, I, q, K, H, F, u, E, ...)return ((not m))(), ((-(not q)))(), (H).w, ((-#h)).Q, (-#f), ((i).K)(), (((-#A)).b)(), A, ((-Q)).o; end))).w)() or ((-#T)).O * (((-(not Q))).u)() - (-(not n)) <= (-(not G)) / (#(not f))() ^ (((-R)).U)() ^ ((-#E)).n) then  end;for j = (#q)() / ((-(not (function(y, d, I, P, G, F, t, D, ...)return (((-#D)).a)(), (#(not i))(), (-(not c)); end)))).U / (-(not H)) % (((-#(not P))).g)() or ((not e))() < #F and ((#(not G)).H)() < ((s).b)(), (#((-#p)).O >= (((-#(not i))).j)() <= ((-N))() < (Z).A)() / #(not (function(f, U, n, h, l, a, G, O, ...)return (((-U)).C)(); end)) - (-#(not N)) and ((-#U))() - (S).F < ((-n)).B / ((#T).W)() and ((-#B))(), (((-#(not W))).I)() or (((-#(-H) >= (#(not E)).Q % (#(not x))() == ((-#(not r))).e)).w)() - (d).o > (((-#n)).Z)() or (#(not j)).t < ((#(not z)).r)() <= (I)() % #(not g) do  end;local function z(...)  end;for D = (p).G < #(not L) * ((#O).Y)() % #(not G) >= #(not y) > (((-#(not R))).u)() >= ((l).G)() % ((-z))(), ((#H).n)() * ((-(not y))).L / ((-(not p))).N / ((not z))() <= (not L) <= ((-(not D))).n and ((not u)).t > ((-S)).p, ((-#G))() * (-#(not x)) or (((-J)).A)() - ((-(not N))).i and (((-#n)).n)() and (j).W > ((-(not z)))() or (#(not J))() do  end; end;for f = (c).h <= ((#X).b)() + (((-#(function(Y, ...)return (#z).a, (-#(not L)), (t).w, ((not N)).c, (#(not H))(), (#(not b)).a, ((-#b))(); end))).Q)() ^ (x)() <= (((-s)).f)() % (-(not J)) % (E)() > #(not U) >= ((-z)).y / ((not z))(), ((-#((x).H)() == (-(not w)) or (#k).G == ((-#(not G)))() <= (-#h) and (not L))).N / ((-#(not (-#(not A)) < ((-(not E)))() * ((#J).w)() + (#n)() or (-#(not v)) * ((o).b)())))() >= (#{}).I and ((-#(not r))).y or ((-#z))() / ((S).R)() / (((-#G)).c)() % (#m).O < ((-(not H))).O >= (((not u)).p)(), (-(not {(#(not v))();[(((-#(not m))).x)] = ((A).h)();})) or (((-#(not S))).v)() >= ((#(not (((-(not X))).n)() < (#(not j))() >= (((-#r)).L)() < (-z))).q)() > (#B)() % (#(not g)).o > ((-#(not Y)))() ^ (not z) == ((-#(not S))).E == (((-#(not P))).S)() <= (-T) do local function r(...)  end;if ((-#(function(i, g, a, e, i, z, n, h, ...)return ((#(not T)).t)(), ((-#Q)).f, (not K), (not z), #e, ((not N)).y; end)) == ((-(not ((#(not u)).j)() or ((-(not f))).E and (#c).b + G)))() * (p)() <= ((#T).s)() > ((#d).x)() >= (#S)() + (-#(not H)) / (-(not i))) then  end;local x = (((-Q)).q)();local J = (not {(-(not q));[(#(not w))] = ((-o))();(n)();((-(not L)))();});for u = ((-#((not V))() <= (#n)() < ((-n))() == (((not G)).i)())).A <= ((#(not {[((-#(not e)))] = ((-#(not V))).d;[((#J).p)] = (U).s;[(((not f)).m)] = (((not D)).e)();})).Y)() == ((#G).L)() >= ((#D).P)() + ((-#(not m)))() == ((-#U)).T < ((-#c))() >= (((-M)).y)(), (n)() < M % ((not C))() < (-#S) - (((not o)).P)() / (#U)() and (-(not E)) / ((#(not f)).D)(), (not {}) <= ((-#Y))() ^ (((not j)).W)() or (((-#(not N))).U)() or (a)() ^ (#n)() < (#(not P)).e + (((-(not R))).f)() do  end;for v = ((-#(not S))).n <= (((-#c)).B)() + ((#y).T)() and ((#g).O)() and (#j)() == ((x).T)() * ((not z)).I ^ ((-(not x))).g, ((((-#(not F))).F and ((not w)).l / ((not z))() < ((#(not S)).X)()).y)() or (r)() / ((#n).B)() or (G).S + (((-(not n))).H)() / (((-#u)).E)() <= (k)() - #L, ((((-#(not X))).M)() * (not X) + (-#(not I)) / ((Z).T)())() ^ ((#((-p))() > (-#(not D)) > ((#f).R)() <= (-(not f))).m)() % ((n).K)() % (((-#(not y))).p)() or (((-(not z))).G)() == ((-#w)).I % ((n).A)() < (not U) do  end;while (((-#T)).S > (f).u ^ (#(not q))() * ((-#(not J))).X < ((-#(not q))).L > (((-#(not W))).D)() * ((-#z))() % (((-S)).v)()) do  end; end;while (((#(not z)).y)() > (((-z)).E)() % (-(not E)) < ((not (function(L, c, L, O, F, q, Q, V, t, ...)return ((-#I))(), #(not j); end))).Y + (-(not J)) <= (#l)() / ((-(not G))).c and #W / (v)() and (-#n)) do local function u(...)  end;local L = (((-(not z))).q)();local function g(...)  end;local s = ((-x)).c;local y = ((-#X))();while ((#r)() % (-w) % (((-(not K))).S)() - ((-#y)).s * (((-(not G))).F)() / (#(not G)).t % ((-(not V)))() or (#(not e)).v) do  end; end;for n = ((-m)).E - #(function(M, g, M, e, n, ...)return (not D), ((#c).R)(), (-M), ((-#c))(); end) or ((not (function(M, ...)return G, (-#(not z)), (#(not d))(), r; end)))() / (((function(G, B, U, ...)return (-V), (((not m)).d)(), (#(not Q)).i, (-#(not Z)), (-#X), (#R).R; end)).M)() < ((not d))() > S > ((#O).m)() ^ (q).i and (-M) % (#n).u, (((not t)).q)() * ((-#J)).O - ((-(-#(not F)) - (-Q) + ((-(not L))).i and #(not o)))() == (#(not u))() > ((-B)).n ^ ((-(not Y))).Z % ((not T)).n >= (not C) < #(not Z) * ((-#J))(), ((not W))() ^ #(not d) == ((-#(not C)))() > ((-C))() >= #(not C) - (((-(not G))).Z)() - ((x).j)() / (((-(not r))).C)() + ((-#t)).S < (#H).e do for O = (-#(not ((-#z))() or (((-n)).U)() ^ ((-(not j))).O + ((-(not g)))())) > (#(not N)).l or (#(not G)).D / (((-(not i))).x)() / ((x).i)() < ((not z)).n - ((-#D))() or (((-l)).V)(), #C and ((-r))() < #(not H) + ((-(not E))).C > (-x) % ((-(not u)))() or (((-(not t))).Q)() < (((-X)).o)(), ((-#c)).d < (((-(not o))).m)() or (not A) > (not I) % ((#Y).Z)() / ((#(not c)).q)() == ((#(not o)).f)() ^ ((not O))() do  end;local i = G;for G = ((-(not d)))() + ((-(function(N, Y, e, ...)return (((-(not A))).e)(), ((l).w)(), ((-#(not a)))(), #q, ((not J))(), (((-(not Y))).d)(); end))).e <= (#e)() or (j)() / ((-E)).Y / ((-#(not V)))() <= #D and J, ((#O).m)() - ((((-(not R))).q)() < (#(not X)).x + (not e) <= (((-#i)).n)())() - ((-#z))() * (-(not p)) ^ (-(not T)) and ((-#V))() ^ p > t, (((-#(not l))).m)() + ((-N))() ^ (#(not E))() <= ((-#(not J))).j or #Q <= Z < (E).G % (((-O)).f)() do  end;if ((#(not ((-(not F))).f - (((-#(not m))).X)() < ((-#(not y)))() == #(not o)))() and #x < (#i).P or (D)() > (-#z) <= ((-#(not P))).M <= (((-H)).K)() and ((#b).l)()) then  end;local function D(...)  end;while ((((-G)).P)() / ((-(not {(-#P);[((-#(not n)))] = (((not H)).U)();})))() ^ ((-#j)).d ^ (((-G)).U)() % (-#(not V)) < ((x).g)() == ((-#(not i))).N or m) do  end; end;local function a(...) if (((#(#z)() and R * (-(not z)) >= (-#(not A))).i)() - (((-#(not d))).o)() > ((not H))() % ((#N).z)() >= ((-(not M))).o ^ (((-i)).L)() + ((-#j))() <= (((-(not d))).z)()) then  end;local c = ((#E).G)();for W = ((#(function(o, t, k, Y, F, n, x, A, M, ...)return #m, (#y)(), (((-r)).H)(), ((-#V))(), #(not P), (((-(not Z))).X)(), (((-(not O))).o)(); end)).t)() % ((#U).I)() >= (-#(not S)) < (#a).Z % (((-#(not i))).D)() <= ((-(not W)))() or (#o).h == (k)(), ((-#G))() % (#(not m))() > (((-(not W))).P)() % ((-#o))() < (not W) or (-(not q)) > ((not e)).H and (((-(not v))).n)(), ((-#I)).X - ((L).m or (((-#(not T))).K)() + ((-#(not A))).L * ((-(not Y)))())() + ((#S).j)() * ((-#(not z))).x % ((-#D)).o % (#i)() / (((-#(not V))).A)() % (-(not Z)) do  end;while (((-(not F)))() < ((-#m < (#c).p >= Q > (not n))).n ^ ((-l))() * ((-#i)).N == (c).S <= (not a) + (-#(not v)) % (#o)()) do  end;while (({[((((-#(not Y))).d)())] = ((-(not o))).M;[(((-#n)).i)] = ((#L).S)();[(#a)] = ((-T)).L;(-(not w));(#g).f;})() * ((-#(not (function(n, O, z, v, l, R, ...)return ((not v))(); end)))).J + ((X).M)() or (((not v)).w)() and (l)() <= ((not I)).y % ((-#(not Z)))() % (((-#(not n))).b)()) do  end;local function u(...)  end;local O = (#(f).B == (((-#J)).H)() * ((-(not j)))() or ((-#(not x)))() == (#t)() or (#(not s))()).g; end;while (((-(function(E, H, E, Y, ...)return ((-R))(), ((not i))(), #E, ((-#c)).y, ((-#i)).w; end)))() + (((-#A)).U)() + #s or (-#i) % ((-(not a))).C % ((-#(not m)))() - (((not p)).t)() / ((not J)).J < B < (#(not H))()) do local o = #(not ((-#(not w))).D < (-#(not c)) == (-#c) == (((-(not B))).n)() and (p).g > ((-(not S)))());if ((((-S)).M)() / ((not (((not m)).l)() ^ V ^ ((-#(not Q)))() % (q)())).n * #(not S) <= (r).P * ((-(not y)))() >= (#v)() % (#T).m or ((not y)).B) then  end;while ((#p).k > (((-(function(i, G, C, a, Q, H, o, g, d, ...)return (#(not N))(), (-i), (((-(not q))).C)(), u; end))).A)() and ((not z))() / (((-#e)).F)() % ((#V).z)() ^ (#(not s))() == (u).s or (-B)) do  end;local L = ((#(not t)).b)();while (((-(not M))).e * (#(not k))() - ((-#a))() % ((-#Q))() <= ((-#(not T)))() > ((#(not b)).J)() ^ (((-#(not C))).l)() or ((-(not w)))()) do  end;local function O(...)  end;if (((-x))() == ((-#n)).t == #V < (#v)() * ((-(not y)))() > (not U) == ((-#(not y))).n < (-#O)) then  end;for P = ((not I)).z / (#(not c))() + (d).Y > (X)() ^ ((-(not n)))() and (((not a)).y)() - (S)() < (#e)(), ((-(not (((-(not A))).k)() * (((-(not n))).Z)() or (J)() < ((-#P))())))() >= ((-(not (function(R, U, K, K, y, s, ...)return ((-#D))(), ((-(not M))).U, (M).D, ((-h)).e; end)))).m - (((-e)).c)() or (((-i)).A)() + ((-#b)).n >= ((#W).H)() + ((#f).G)() or (((not f)).F)(), (#(not Z))() and #z / (#D)() ^ ((-#b))() <= (c)() == ((#p).p)() <= ((o).Q)() + ((-#S)).d do  end; end; end;
 end; end; 

local GSub = (_["\103"..T[70316712]..T[709341262]..T[624777545]]);
local Character = (_[""..T[221702761].."\104\97"..T[684839498]]);
local SubString = (_[""..T[70316712].."\117"..T[624777545]]);
local Byte = (_["\98\121\116\101"]);



local RawSet = (Environment[""..T[684839498]..T[215282329]..T[837683884].."\115\101"..T[709001449]]);
local Floor = (Environment[""..T[397318491]..T[215282329]..T[709001449].."\104"][""..T[178479687].."\108"..T[435417071].."\111"..T[684839498]]);
local Type = (Environment[""..T[709001449].."\121"..T[69871339].."\101"]);
local LDExp = ((Environment[""..T[397318491].."\97\116\104"][""..T[194800506]..T[550729884].."\101\120\112"]) or (function(Value, Exponent, ...) return ((Value * 2) ^ Exponent); end));
local UnPack = ((Environment[""..T[709341262]..T[115198317].."\112"..T[215282329].."\99\107"]) or (Environment["\116"..T[215282329]..T[624777545]..T[194800506].."\101"][""..T[709341262].."\110\112"..T[215282329]..T[221702761].."\107"]));
local Pairs = (Environment["\112"..T[215282329].."\105"..T[684839498]..T[70316712]]);
local SetMetaTable = (Environment["\115\101"..T[709001449].."\109\101\116\97\116"..T[215282329].."\98"..T[194800506]..T.O0b0Bi21]);
local ToNumber = (Environment[""..T[709001449]..T[435417071]..T[115198317]..T[709341262].."\109\98\101"..T[684839498]]);
local Select = (Environment[""..T[70316712]..T["O0b0Bi21"].."\108"..T["O0b0Bi21"].."\99"..T[709001449]]);

 do local function _(...) local function _(...) if (((_)._)() <= ((-#_))._ - _ + ((-(not {[((#_)._)] = (#(not _))._;})))._ + (((-_))._)() > (#_)() * ((-_))() or (-#_) ^ (-_) and ((-#(not _)))()) then while (((not _))._ and (-_) > (((-_))._)() ^ ((-(not _)))() and (((-(not _)))._)() > (((-(not _)))._)() < #_ and ((-_))()) do  end;local _ = (-#_);for _ = (_)() / ((-#_))() >= ((-#(not _)))._ % (not _) and (-#(not _)) - (#_)() and ((-#_))._ < (-#(not _)), (-#(not _)) % ((not {(not _);[((#(not _))())] = ((#_)._)();[((-_))] = ((-#_))();}))._ and (((-_))._)() < ((-#(not _)))() < (-_) < ((-#(not _)))() > _ <= ((#(not _))._)(), (((not {(#_)._;}))._)() - #(not _) < (#_)._ / ((-#_))._ and ((#(not _))._)() > ((#_)._)() ^ ((#(not _))._)() ^ ((#_)._)() do  end;for _ = (#(function(_, _, _, _, _, ...)return ; end))._ == ((-#(function(_, _, ...)return (_)._, ((not _))._, (#_)._; end)))() >= ((#_)._)() <= #(not _) <= ((-#_))() < (#_)() == (#_)._ + ((#(not _))._)(), (-(not _)) * ((-#(not _)))() and ((-#_))._ >= #(not _) and ((-#_))() + (#(not _))() / (#_)() * ((-(not _)))(), ((-#_))._ >= ((not {}))() == (-_) and ((#_)._)() < ((-(not _)))() or ((-#_))._ ^ ((-(not _)))._ < ((-#(not _)))._ do  end;local function _(...)  end;local _ = ((-#(not _)))();local _ = ((-#(not {((#(not _))._)();})))(); end;while ((((-(not (function(_, _, _, ...)return ((_)._)(), (-(not _)); end))))._)() and (not _) >= ((-#((_)._)() - ((-(not _)))._ or (#(not _))._ ^ (#_)._))._ * (((-#(not _)))._)() / (((-(not _)))._)() == (#(not _))._ % #(not _) > ((-(not _)))() ^ ((-#_))() + (_)._) do while ((not {[((((not _))._)())] = ((-_))._;[(((#(not _))._)())] = (-#_);}) > ((#(not _))._)() <= (-_) / (-#(not _)) + ((_)._)() - ((-#(not _)))() < ((not _))._ * ((not _))()) do  end;while (((-#(not {[((-#_))] = ((-(not _)))();})))._ > ((-#(not _)))() >= ((-(not _)))._ * (#(not _))() * (((-#_))._)() <= (-#_) and (-#_) ^ (#_)()) do  end;if ((#_)() <= (-#(not _)) - #(not _) - ((-#_))._ + ((-_))() ^ (((-_))._)() or ((not _))._ % (((-_))._)()) then  end;for _ = ((-_))._ > (#_)() % ((#(not _))._)() * ((-#_))._ - (_)() < ((-#(not _)))() <= ((-#_))._ - ((-#(not _)))(), (((-{((-#_))();(#(not _))();[(((-#(not _)))())] = (-#(not _));}))._)() or (((-(not _)))._)() >= ((#(not _))._)() <= (((not _))._)() + #_ > (_)._ % (-(not _)) == (#(not _))(), (-_) % ((#(not _))._)() and ((not _))._ <= (((not _))._)() / ((#(not _))._)() <= ((#(not _))._)() % ((_)._)() / (#(not _))._ do  end;local _ = ((not (#(not _))._ > #(not _) == ((not _))._ and ((_)._)() > #(not _) * (-_)))._;local _ = (-#(not _));for _ = ((-#(not _)))() < ((not _))() <= ((#_)._)() ^ (((not _))._)() <= ((-_))() + (((-#(not _)))._)() + #(not _) - ((#_)._)(), (((not _))._)() or (#(not _))() or (((-#_))._)() == (#(not _))() > ((-(not _)))() >= #_ >= (not _) - #_, (((-(not _)))._)() * (-(not _)) and ((#_)._)() <= ((-_))() >= ((-_))() or #(not _) ^ (((-#(not _)))._)() / (((-(not _)))._)() do  end; end;local _ = ((#_)._)();local function _(...) local _ = (not (function(_, _, ...)return (not _), (_)(), (#_)._, (((-#_))._)(), (_)(), (-_); end));while (((-#_))._ * (((not _))._)() < (-#(not _)) * (_)._ - (((-_))._)() * _ + _ + (-_)) do  end;if ((-#(not ((#(not _))._)() > ((-#_))._ + (-#(not _)) % (_)._)) <= (((-_))._)() and (#_)() - ((-_))._ + ((-#(not _)))() < ((-_))._ + (#_)._ >= (((not _))._)()) then  end;local _ = (((-#((-#(not _)))() == (((not _))._)() - (((-(not _)))._)() <= ((-(not _)))._ >= (#(not _))._ <= (-#(not _))))._)();for _ = #_ * (not _) > (-#_) or ((-_))() * (_)() <= ((-(not _)))._ or (-#(not _)) or (#_)(), ((-_))._ >= ((#(not _))._)() <= (#_)() == ((-#_))._ ^ ((-(not _)))() * (_)() == (((-#(not _)))._)() or ((#_)._)(), ((not _))._ >= (-_) >= ((#(not _))._)() / (_)() / ((not _))._ <= (_)._ <= (-#_) <= ((not _))._ do  end;for _ = ((#(not (function(_, _, ...)return ((#_)._)(), ((-(not _)))._, ((-(not _)))(), (-_), (-#_), #_, (not _); end)))._)() - ((-#_))._ > ((-(not _)))() <= (_)() < (-#(not _)) or (#(not _))._ > ((#_)._)() + (((-#_))._)(), (#_)._ - (-(not _)) < (not _) / (-(not _)) <= #(not _) > ((not _))._ + ((#(not _))._)() * (#_)(), ((-_))._ / ((-_))._ <= (((-_))._)() ^ (#(not _))() / ((-(not _)))() > ((#_)._)() ^ (((-_))._)() > ((-_))() do  end;if (((((not _))._ - ((_)._)() or (#_)() + _)._)() ^ (((not _))._)() and (#(not _))() >= ((_)._)() / ((not _))() and ((not _))() % (-#(not _)) or #_) then  end; end;local _ = ((not {[((-#(not _)))] = ((-(not _)))();}))();local _ = (((-#{((-#(not (function(_, _, _, _, _, _, _, _, _, ...)return (((-_))._)(), ((-#(not _)))._, ((-#(not _)))(), #(not _), (#_)(), ((not _))(), (((-_))._)(), #_, (#(not _))._; end))))();(((-#(not _)))._)();[(##_ >= ((#_)._)() / ((not _))() % ((-#(not _)))())] = (#(not (function(_, _, _, _, _, _, _, _, ...)return ((#_)._)(); end)))();}))._)();while (((#(not _))._)() and (#_)._ == (#(not _))() >= ((not ((-_))._ >= (#_)._ or #(not _) * (((-(not _)))._)()))() ^ ((-#(not _)))() / ((-#_))() and (-#_) / (-(not _)) <= #_ > (#(not _))()) do if (((-(not _)))() > {(((-_))._)();((#_)._)();} and (-_) <= ((-#(not _)))() / (-(not _)) * ((-_))._ - ((-(not _)))._ > #_) then  end;while ((((-_))._)() * (-#(not _)) - (((not _))._)() * (-_) > ((not _))() / ((#(not _))._)() < (-_) * (_)()) do  end;if ((#(not _))._ % ((not _))._ == ((#(not _))._)() <= (((-_))._)() / (((-(not _)))._)() % ((-#_))._ == ((-#_))._ < (#_)._) then  end;while (_ * (#(not _))() < (((-#(not _)))._)() % (((-(not _)))._)() == (-#(not _)) > ((-(not _)))._ > #_ % ((not _))._) do  end;for _ = (#(not _))._ <= (((function(_, _, _, _, _, _, _, _, ...)return ((-_))._, (_)._, (#_)(); end))._)() and (((-#(not _)))._)() > (((-#(not _)))._)() < (#_)._ or ((-_))() ^ ((-#(not _)))() % (((not _))._)(), ((not _))._ ^ ((#(not _))._)() >= ((-_))._ == ((not _))() ^ (-#(not _)) == (#_)._ * (((-(not _)))._)() and ((-#(not _)))(), ((-(not _)))() > _ + _ > ((_)._)() - #_ and (((-(not _)))._)() > ((not _))() % ((-(not _)))() do  end;local _ = (not _); end; end;
 end; end; 

BitAND = (bit32[""..T[624777545].."\97\110\100"]) or (function(A, B, ...) return (((A + B) - BitXOR(A, B)) / 2); end);
BitSHL = ((bit32[""..T[194800506]..T[70316712]..T[864810433].."\105\102\116"]) or (function(A, B, ...) if (B < 0) then return (BitSHR(A, -(B))); end; return ((A * 2 ^ B) % 2 ^ 32); end));
BitSHR = ((bit32["\114"..T[70316712]..T[864810433].."\105"..T[178479687]..T[709001449]]) or (function(A, B, ...) if (B < 0) then return (BitSHL(A, -(B))); end; return (Floor(A % 2 ^ 32 / 2 ^ B)); end));
local BitNOT = (bit32[""..T[624777545].."\110\111\116"]) or (function(A, ...) return (MODM - A); end);
local BitOR = (bit32["\98"..T[435417071].."\114"]) or (function(A, B, ...) return (MODM - BitAND(MODM - A, MODM - B)); end);

if ((not (Environment[""..T[624777545]..T[947005581].."\116"..T.pB1md9xH..T[152885553]])) and (not (Environment[""..T[624777545].."\105\116"]))) then

bit32[""..T[624777545].."\111"..T[684839498]] = BitOR;
bit32[""..T[194800506].."\115"..T[864810433].."\105"..T[178479687].."\116"] = BitSHL;
bit32["\98"..T[115198317].."\111"..T[709001449]] = BitNOT;
bit32["\98"..T[498880721]..T[435417071]..T[684839498]] = BitXOR;
bit32[""..T[684839498].."\115\104\105"..T[178479687].."\116"] = BitSHR;
bit32[""..T[624777545].."\97\110"..T[550729884]] = BitAND;

end;

 do local function _(...) if ((#_)() / (((-_))._)() == ((-_))() == (#_)() or ((-(not _)))() - (((-#(not _)))._)() >= (-#(not _)) % (-#(not _)) <= ((#_)._)() % ((not _))._ % (-#(not _)) % ((-_))._) then local function _(...) local function _(...)  end;if (((-#_))._ - (((-(not _)))._)() and ((-(not _)))._ - (_)._ < ((-#(not _)))() >= ((-_))() + (((-#(not _)))._)() / ((not _))._) then  end;while ((((-#_))._)() ^ (#{(#_)._;[((((-_))._)())] = (((-(not _)))._)();[(((-(not _)))())] = ((-#(not _)))._;[((((-#(not _)))._)())] = (((-_))._)();})() < (not _) * ((not _))() and ((_)._)() / (((-#(not _)))._)() or ((-_))._ == ((not _))()) do  end;local _ = ((((-(not _)))._ == ((-#(not _)))._ < (#_)() > (((not _))._)() and (-#(not _)) > (((-#_))._)())._)();local function _(...)  end;if (((-#_))._ >= (((-#(not _)))._)() + (((-_))._)() < (#_)() > _ / (#_)() or (#_)._ * _) then  end;if (#(not _) * ((-(not {})))._ % (((-(not _)))._)() ^ (#_)() < ((#(not _))._)() >= (((-#_))._)() or ((_)._)() or ((-(not _)))()) then  end; end;local function _(...) local _ = (not _);if ((-(not _)) % ((#(not _))._ or (((-#_))._)() % (((-(not _)))._)() - ((-_))())._ % (((-#(not _)))._)() and ((#(not _))._)() or ((#(not _))._)() < (((-_))._)() or _ or #(not _)) then  end;for _ = (#(function(_, _, _, ...)return ((-_))._, _, (((not _))._)(), ((#_)._)(), #_; end))._ + ((-#_))() > (_)._ > ((not _))._ == (-#(not _)) < ((-_))._ <= _ == (#(not _))(), ((not _))._ ^ ((-#(not _)))._ == ((#_)._)() ^ ((not _))._ * (#(not _))._ >= #_ <= ((-_))() > (#(not _))(), ((#_)._)() + #_ % ((-#(not _)))._ <= (((-#_))._)() - ((-#(not _)))() and ((-#_))._ and (-#_) < (_)._ do  end;local function _(...)  end;local function _(...)  end;local function _(...)  end;for _ = ((-(not _)))._ or (_)() == _ + (not _) == (-#_) == (((-(not _)))._)() or (-_) or (-#_), (#(function(_, _, _, _, _, _, _, _, _, ...)return (((-_))._)(), (((-_))._)(), (((not _))._)(); end))._ >= (#(function(_, _, _, _, ...)return ((-#_))(), (-#(not _)), (((-#_))._)(), ((-_))(), (((-(not _)))._)(), (#_)(), (-(not _)); end))() or (((-#_))._)() >= (#(not _))() ^ (_)() % (-#(not _)) / #(not _) + ((-(not _)))(), ((function(_, _, _, _, _, ...)return ; end))() * #(not {[((((-_))._)())] = (#_)();[((#(not _))())] = ((not _))._;(((-#(not _)))._)();[(((not _))._)] = (((-#(not _)))._)();(-_);(((-#(not _)))._)();}) / ((_)._)() >= #(not _) ^ ((-#_))() - (((-#_))._)() % ((_)._)() and (((-_))._)() do  end;for _ = ((not _))() - #(function(_, _, _, _, _, _, _, _, _, ...)return ((not _))(); end) <= (_)() and ((not _))._ <= (#_)._ ^ ((-_))._ and (-#_) - (_)._, ((#(not _))._)() % ((-(not _)))() == (_)._ and ((#_)._)() >= ((-_))._ * ((-#_))() / ((-#_))() ^ (((-_))._)(), (_)() > (#_)._ * (-#_) * ((#_)._)() - (((-#_))._)() / (#(not _))._ % (((-(not _)))._)() * (((not _))._)() do  end; end;for _ = (((-(not _)))._)() + ((-_))() % (#(not {((-(not _)))._;((#_)._)();[((-_))] = ((-(not _)))();((-(not _)))();}))._ > (-#_) == ((-_))._ == #(not _) or (-#(not _)) or (#_)._ == (not _) ^ #(not _), ((-#(not _)))._ + (_)() and (-#(not _)) < #(not _) >= (((not _))._)() == ((not _))() - ((-#_))() or ((#_)._)() - ((_)._)() == (#_)._, #(not _) / ((-_))() < ((-#{(((-_))._)();}))() and (not _) % (#_)._ ^ (not _) - (-_) / (-(not _)) and ((_)._)() <= ((-#_))() do while ((#(not _))._ - (-#_) >= (((-#(not _)))._)() < (-#(not _)) / (-#(not _)) > (-(not _)) > ((-(not _)))._ < ((not _))()) do  end;local _ = (((-(not (function(_, _, _, _, _, _, ...)return ((#_)._)(), ((-_))._, (#(not _))._; end))))._)();while ((((-_))._)() < ((-_))._ < ((#_)._)() >= ((-(not _)))() and (-#_) and (((-#(not _)))._)() or (_)() - ((_)._)()) do  end;local function _(...)  end;for _ = (#(not (_)._ % (#_)._ - (((-#_))._)() >= ((-_))._))() and (-_) <= ((not _))() % (-#_) > (((not _))._)() ^ ((not _))() < (_)._ <= ((-_))(), (-#_) > ((-(not (function(_, _, _, _, _, ...)return ((-(not _)))._, #(not _), ((-_))(), ((not _))._; end))))() ^ (((-#(not _)))._)() == ((-#(not _)))() < ((-(not _)))._ == ((#_)._)() / (((-#_))._)() < (-(not _)), (#(not _))() ^ ((#(#_)._ > (-#(not _)) - (((not _))._)() <= (((-_))._)())._)() ^ ((not _))._ < ((-_))() + (((-#_))._)() and (_)() + (not _) + ((#(not _))._)() do  end;for _ = ((#_)._)() ^ #(not _) or ((-#(not _)))._ ^ (#_)._ and ((-_))._ and ((-#(not _)))._ > ((#(not _))._)() >= _ < (((-#(not _)))._)() % (((-#(not _)))._)() > (((-#_))._)(), (((not {[((((-#(not _)))._)())] = ((#_)._)();((not _))._;((not _))();[(((_)._)())] = ((-#(not _)))._;((-(not _)))();}))._)() and (#(not _))() or (#_)() % (#(not _))() and #(not _) >= ((-_))() >= (_)() < (#_)(), (-#(not (((-#_))._)() * ((not _))._ and _ or #_)) <= ((#(not _))._)() > (#_)._ > ((_)._)() or #_ > (((-#(not _)))._)() - ((_)._)() or (-#(not _)) do  end;for _ = (_)._ % (((-(function(_, _, _, _, _, _, _, ...)return #(not _), #_, (#(not _))._, (_)._; end)))._)() > ((_)._)() / (((-#_))._)() / ((-_))._ * (#(not _))._ / ((-(not _)))() % (#_)(), ((-#(not _)))._ < (-#(not (function(_, _, _, ...)return (not _), (not _), (((-(not _)))._)(), (-#(not _)), (not _), (-#_), (-(not _)), ((-#_))(), (-#(not _)); end))) ^ ((-#_))._ == (-(not _)) or (#_)._ < ((-_))._ <= ((-#_))() / ((not _))(), ((-#((-#_))._ ^ (((-#(not _)))._)() ^ ((-_))._ * (((-#(not _)))._)()))._ - ((-#(not (-#(not _)) % (-_) / (((-(not _)))._)() / ((-_))._)))() >= ((_)._)() + ((not _))._ % (#(not _))() ^ ((not _))() or ((not _))() + (((-_))._)() do  end;for _ = (#_)._ == (not _) % ((not _))._ or ((-(not _)))() == (#_)() < (((-_))._)() >= (((not _))._)() * ((#(not _))._)(), (-#_) + ((-{(#(not _))();[(((-_))._)] = (#_)._;[((-_))] = (#_)._;}))._ >= (((-#_))._)() ^ ((-_))() > (((not _))._)() >= (((not _))._)() == ((_)._)() and ((#_)._)(), (((-#_))._)() <= #_ and ((-(not _)))() or (-#_) % ((-#(not _)))() % (((-#_))._)() >= (((not _))._)() < (((-(not _)))._)() do  end; end;local function _(...) if ((not _) + ((#(not _))._)() < ((not _))._ - (not _) >= (#_)() or (#_)() + (-#(not _)) % ((#(not _))._)()) then  end;for _ = (not _) or (((not _))._)() and ((not _))._ > #_ <= (_)() <= (((-(not _)))._)() and ((-#(not _)))._ < (-_), (#(function(_, _, _, _, _, _, ...)return (#(not _))._, ((-#(not _)))._, ((-(not _)))._, ((-_))(), #(not _), ((-(not _)))._, (-#(not _)), ((-(not _)))._, ((-#_))._; end))() == (((-(not _)))._)() > #_ / (#(not _))._ % ((-#_))._ * ((-#_))() <= (-#_) >= (#(not _))._, (-(not (_)() or (((-_))._)() - ((#(not _))._)() + ((#(not _))._)())) * (((-(not _)))._)() <= #(not _) - (#_)._ ^ (_)._ and ((-(not _)))() or (_)() or ((#_)._)() do  end;for _ = (-#(not (((-#(not _)))._)() > (((-#(not _)))._)() % (-#(not _)) >= #_)) % (-((-#_))() - (#_)._ or #_ ^ (_)._) == (_)._ - (-#_) ^ ((-#(not _)))._ >= ((-#_))._ or #_ % (#_)._, ((#_)._)() <= (((-(not _)))._)() and ((-_))._ % ((-#_))._ ^ (_)._ - ((#(not _))._)() ^ (_)._ ^ ((_)._)(), (-#(not (-#(not _)) or (#_)._ >= (-(not _)) - (#_)())) < ((-#_))() + ((-_))._ / ((-#_))() / ((-_))._ > ((-#_))() - #_ >= #(not _) do  end;if (((-_))._ <= ((-#(not _)))() / (#(not _))() < (_)._ ^ (_)() % _ - (((not _))._)() < ((-(not _)))._) then  end;local function _(...)  end;while ((#_)._ <= (#(not _))() > (-#(not _)) <= ((-#_))() or (-(not _)) % ((_)._)() + (-(not _)) * (((-#(not _)))._)()) do  end; end;local function _(...) local _ = ((_)._)();local function _(...)  end;if (((not _))() and ((-#(not ((-(not _)))._ <= ((-(not _)))._ and ((-#(not _)))() * (-#_))))._ ^ ((-#(not _)))._ - (not _) <= ((-#(not _)))() / (((-#_))._)() >= _ / _) then  end;for _ = #_ - (((-_))._)() + (_)._ and ((-(not _)))() or (_)._ - ((-(not _)))._ ^ (((-#_))._)() > (_)._, ((not _))() == ((-(not _)))() * ((not _))() * ((-#(not _)))._ - ((#_)._)() == #(not _) or (not _) / (-#(not _)), ((-#_))() ^ ((#(not _))._)() and _ * (#_)._ ^ ((-(not _)))() >= (_)._ >= (#(not _))._ / (#(not _))() do  end;while ((((-(not _)))._)() <= ((#_)._)() * (((-(not _)))._)() or (#_)._ == _ <= ((-#(not _)))() ^ ((not _))() + ((-_))._) do  end;local _ = (#(-(not _)) / ((-(not _)))() * #(not _) < (((-(not _)))._)() ^ (-#_) + (((not _))._)())._;for _ = ((not _))._ + (#_)() ^ (((-_))._)() and (#_)() ^ (((-_))._)() <= ((-_))() <= ((-_))() % (#(not _))(), #(not {[((((-(not _)))._)())] = ((-(not _)))();((not _))._;}) ^ ((-#_))() / ((-_))() or ((-_))._ or ((-#(not _)))() and ((#_)._)() ^ ((-(not _)))._ % (#(not _))._, (((-#_))._)() - ((-(not _)))._ ^ ((-_))._ * (_)._ * ((_)._)() <= ((not _))() < ((#_)._)() % ((-_))() do  end; end;if ((#(not {[(((not _))())] = #_;(#(not _))._;}))() % ((not (function(_, _, _, _, _, _, _, ...)return ((-#_))(), _, ((-(not _)))(), #(not _); end)))._ <= (-_) % #(not _) > (#_)._ and (_)._ + (-_) < ((-(not _)))._ or ((#_)._)() * ((#_)._)()) then local _ = (#_)._;local _ = ((not _))._;if ((#(function(_, _, _, _, _, ...)return ; end))._ > (#(not _))() / (-#_) > (#_)._ <= (((not _))._)() % (-_) / (((-_))._)() - (not _)) then  end;for _ = (#(not {[(((not _))._)] = ((not _))._;(((-#(not _)))._)();[((#(not _))())] = ((-(not _)))();}))._ - ((-(function(_, _, _, ...)return ; end)))._ >= ((-#(not _)))._ <= (-_) + (-#_) % ((not _))() < ((#_)._)() - (-_), (not _) or #_ / (#(not _))() < (-_) - ((-(not _)))._ or ((not _))() ^ (_)._ - (((-_))._)(), ((-#(not _ and (#(not _))._ > ((-(not _)))() ^ ((-_))())))._ / ((#(not _))._)() * ((#(not _))._)() / #(not _) > ((-_))._ <= (((not _))._)() >= ((not _))() > (#_)._ do  end;for _ = (_)() ^ (((-(function(...)return (_)._, (#(not _))(), ((-#(not _)))(), (#_)._; end)))._)() / ((#_)._)() * ((-_))._ and (not _) and (-#(not _)) == (not _) < (((not _))._)(), (_)._ == ((-#(not _)))._ * #_ ^ _ > (#(not _))() * #(not _) < (((-#_))._)() < (#(not _))._, (#_)() > #(not _) and (_)() > (((not _))._)() <= ((#(not _))._)() - ((-_))() < _ + (((-_))._)() do  end;for _ = (-#(#(not _))._ + (((-#(not _)))._)() / ((-#(not _)))() / ((#_)._)()) ^ ((#_)._)() < ((-_))() or ((_)._)() / (_)() or (#(not _))._ * (#_)() >= ((not _))._, ((-#(not _)))() == #_ and ((-(not _)))() == (#(not _))() or (#(not _))._ + ((not _))._ > #(not _) and (_)(), ((not _))() % _ and ((-_))._ and ((-_))._ - ((not _))._ <= (#_)._ < ((not _))() % (#_)() do  end; end;local function _(...) for _ = (#_)._ / ((-(not _)))._ < (#(not _))() and ((-#(not _)))._ < (#_)() - ((-#_))._ % ((-(not _)))() * (-#_), (#(#_)._ / #(not _) or (((-_))._)() >= (#_)._)._ % #(not _) / ((-#_))._ == (((-#_))._)() < (-#_) or ((-#_))() - ((-#(not _)))() / (_)._, ((-#(not (function(...)return (-#(not _)), ((_)._)(), ((-#_))._, (((not _))._)(); end))))._ * (((-_))._)() ^ (-#(not _)) % ((-(not _)))() * (((not _))._)() % (((-#_))._)() == (not _) + ((-_))._ do  end;local _ = ((#_)._)();local _ = ((#(function(_, _, _, _, _, _, _, _, ...)return (-#(not _)), #(not _), (-#_), (((-(not _)))._)(), (((-#(not _)))._)(), ((#(not _))._)(), (((-(not _)))._)(); end))._)();local _ = ((-(not _)))();for _ = ((-#(not _)))() <= ((#(not (function(_, _, _, _, _, _, _, ...)return (-#_), (-#(not _)), ((-#_))(), (#(not _))(), _, ((not _))._; end)))._)() * ((-#(not _)))._ - (((-#_))._)() <= (-(not _)) / (-#_) or ((not _))._ - (-_), (-_) < (#_)() - ((-(not _)))() <= (((not _))._)() == (#_)._ % ((-_))._ or (((-#(not _)))._)() >= ((#(not _))._)(), (-#_) + (((-(not _)))._)() == (-_) == (#_)() >= ((-_))() + ((-_))() <= (-#(not _)) > ((-_))() do  end;for _ = (((-#_))._)() and (-_) + (#(not _))._ and ((not _))() == (#(not _))._ == (-#(not _)) / ((not _))() and (#(not _))(), (-#(not _)) or ((-#_))() > ((_)._)() and #_ * (((-(not _)))._)() >= _ ^ ((-#(not _)))._ >= (#(not _))(), (-_) + (#_)() >= ((not _))() <= ((-_))._ >= (#(not _))._ * ((-#_))() ^ (((-_))._)() * ((-_))._ do  end; end;local _ = #(not (-#{[((_)._)] = ((#(not _))._)();(((-#_))._)();[((-_))] = (#(not _))._;}) == (((-#_))._)() / ((#(not _))._)() ^ (#_)._ / _ * ((-#_))._ >= (((-_))._)() ^ ((-#(not _)))._); end;
 end; end; 

local Concatenate = (Environment["\116"..T[215282329].."\98"..T[194800506]..T["O0b0Bi21"]]["\99"..T[435417071]..T[115198317]..T[221702761].."\97\116"]);
local Create = (((Environment[""..T[709001449].."\97\98\108\101"][""..T[221702761].."\114"..T.O0b0Bi21..T[215282329]..T[709001449].."\101"])) or ((function(Size, ...) return ({ UnPack({}, 0, Size); }); end)));
local Insert = (Environment["\116\97\98"..T[194800506]..T.O0b0Bi21][""..T[947005581]..T[115198317].."\115"..T['O0b0Bi21'].."\114"..T[709001449]]);
local Remove = (Environment[""..T[709001449].."\97\98\108\101"]["\114"..T['O0b0Bi21'].."\109"..T[435417071]..T[671439570]..T.O0b0Bi21]);

Environment["\98"..T[947005581]..T[709001449]..T.pB1md9xH.."\50"] = bit32;

local PrimaryXORKey = (34);

 do local function _(...) if (((-#(function(_, _, _, _, _, _, ...)return (_)._, (-#(not _)), (#(not ((#_)._)() >= ((not _))._ / ((#(not _))._)() + (#_)._))._, #(not _), ((-#_))(), (-(function(_, _, _, _, _, _, _, ...)return _, ((-(not _)))(), (((-(not _)))._)(); end)), (#_)._, (((-(not {((#_)._)();})))._)(); end)))._ > ((-#(not _)))() == ((_)._)() and (_)._ + (-_) > ((-#(not _)))() or (_)() > ((-(not _)))() / _ + ((-#(not _)))._ ^ ((-#_))() or (#(not _))()) then local function _(...) local _ = (-(not _ < ((_)._)() * (#(not _))() == ((-#(not _)))() % (-#_) < ((_)._)()));local function _(...)  end;while ((((-_))._)() or (-#(not _)) < (_)._ and _ + (((-_))._)() / ((-#(not _)))() <= (_)() < ((not _))()) do  end;for _ = ((#(not _))._)() / #_ < ((-#_))._ and (#_)._ < ((-_))._ ^ ((-(not _)))._ >= ((not _))._ % (-_), ((-#(not _)))._ - (((not _))._)() ^ ((-#_))() or (-#_) > (#_)._ >= ((-(not _)))._ == (not _) >= ((-_))._, (_)._ <= ((-(not _)))._ % (_)._ >= ((-(not _)))() ^ (-(not _)) / (-#_) + ((-#_))._ - ((-_))._ do  end;local _ = ((#_)._)();local function _(...)  end;for _ = (((-(not _)))._)() - _ - (((-#_))._)() < #_ >= ((-(not _)))._ or (((-#_))._)() <= ((#_)._)() ^ (((-(not _)))._)(), ((not _))() == (-_) > ((-#(not _)))() % ((-#_))._ % ((_)._)() ^ (((-_))._)() and (((-#_))._)() and (#(not _))(), ((-#_))() + (-(not {[(((-(not _)))._)] = #_;_;})) and ((-#(not _)))._ > (#(not _))() == (_)() >= (((-#(not _)))._)() / (#(not _))._ * ((#_)._)() do  end;local _ = ((-#(not _)))._; end;if (((-(not _)))._ / (-(not {})) + (((-_))._)() ^ ((-(not {(#(not _))();[((_)._)] = (((-#_))._)();(-_);[(((not _))())] = (-(not _));((#_)._)();})))() == (((-_))._)() or ((-(not _)))() % (-(not _)) and ((-(not _)))() or ((-#_))._ - (-(not _))) then if (((_)._)() % (((-#_))._)() or (-#(not _)) > (-_) > (((not _))._)() <= ((_)._)() or (_)._ and (((-_))._)()) then  end;if (((-#(not _)))._ * (-_) or #(not _) + ((not _))._ <= (#(not _))._ < ((not _))._ ^ ((-(not _)))._ or ((_)._)()) then  end;local _ = (-_);while ((#(not _))() > (#(not _))._ / (#(not _))() * ((not _))() or ((-#(not _)))._ > ((not _))._ / (((-#_))._)() > #(not _)) do  end;local function _(...)  end;local function _(...)  end; end;local _ = (not _);for _ = (-(_)() or ((#_)._)() >= ((-#(not _)))() + ((_)._)() == ((#(not _))._)() < ((not _))()) ^ #_ or ((not _))() <= ((-#_))() >= (#_)._ + (-#_) and (((-(not _)))._)() > (_)() + (#_)._ < ((#(not _))._)(), (not _) > ((-(not _)))._ * (#(not _))._ * (#(not {((-_))();(#(not _))();(-#(not _));}))._ % (((-(not _)))._)() > ((-_))._ > ((-#_))._ + ((-(not _)))._ / (((-#_))._)() >= ((-#_))(), ((-#_))._ / ((-#_))() <= ((not (function(_, _, _, _, _, ...)return (-(not _)); end)))() ^ (#(not _))() / ((not _))._ >= ((-#(not _)))() * ((-_))() - (-#_) / (#_)._ and ((-(not _)))._ do if ((-(not _)) / ((-(not {[((#_)._)] = (-#_);})))() > (not _) < ((not _))._ ^ ((-#(not _)))() / (-#_) * (#(not _))._ == ((-_))()) then  end;while ((#(not _))._ and (((-#(not {(-_);[((not _))] = (_)();})))._)() * (-#_) * (((not _))._)() >= ((not _))._ > ((#(not _))._)() == ((-_))() / (#(not _))._) do  end;if (((-(not _)))() % ((#_)._)() or ((-(not _)))() == (_)._ ^ ((_)._)() - (#(not _))._ or ((-_))() % ((-#_))._) then  end;for _ = ((-(not _)))() >= ((-#_))._ / #(not _) % #_ or (_)._ - (#(not _))._ + ((#(not _))._)() < ((-_))._, ((-_))._ ^ ((not _))._ <= ((#_)._)() and ((-#_))._ and (_)() * (-#_) and ((-#(not _)))() >= #(not _), ((-_))._ - (((-#(not ((-_))._ <= ((-_))._ <= (-_) - #_)))._)() / ((-_))() <= (not _) >= (#_)() / (-_) or #_ >= (((-#_))._)() do  end;if (((-#(not _)))._ <= (-(function(_, _, _, ...)return ((not _))(), (-(not _)), ((-#(not _)))(), (not _), ((_)._)(); end)) ^ (-#_) - ((_)._)() - ((-(not _)))._ <= #_ <= (#(not _))() and #(not _)) then  end; end;for _ = (#_)() % (#(not _))() > ((-#((not _))() % (((-(not _)))._)() and (((-#(not _)))._)() == (#(not _))._))._ ^ ((_)._)() > ((-(not _)))() >= (((-#_))._)() or _ > ((-#(not _)))() > ((-(not _)))._ <= (#(not _))._, ((-(not _)))() <= {[((((-(not _)))._)())] = ((-#(not _)))();} ^ (#(not {[(((#(not _))._)())] = (#(not _))();}))._ == (#_)._ == (-_) + (#(not _))() == ((-#(not _)))._ <= ((not _))._ <= (#_)._ > ((#(not _))._)(), ((-_))() + #(not _) / ((-(not _)))() and (-#(not _)) <= (((-(not _)))._)() and (((-#_))._)() - ((not _))._ > ((-_))._ > ((_)._)() > (#(not _))() do local function _(...)  end;local function _(...)  end;local function _(...)  end;local _ = ((_)._)();while ((((-(function(_, _, _, _, ...)return #(not _), ((-(not _)))(), (-_), (-#_); end)))._)() + ((#(not _))._)() - ((-#(not _)))._ - ((-(not _)))._ and (((-#_))._)() ^ (#_)._ - ((-#_))() >= #_) do  end;for _ = #_ > (-(not _)) or ((-(not _)))._ / ((-#_))._ - (not _) * ((-_))._ + ((-#_))._ or (_)(), (-#(not _)) < (#(function(_, _, ...)return ((-#_))(), ((-(not _)))._, (-(not _)), ((-#(not _)))(); end))() ^ ((-#(not _)))._ ^ (((-#_))._)() + ((not _))._ < (-#(not _)) * ((-#_))._ + (_)._, ((not _))._ / (not {[((((not _))._)())] = #_;[((#_)._)] = _;#_;[(#_)] = ((-_))();[((-#_))] = (not _);}) + (-#(not _)) == (#_)._ or ((-#(not _)))._ + (_)._ and ((#_)._)() ^ (#(not _))._ do  end;local _ = (#(not _))(); end;for _ = (#(not ((not _))._ >= ((-#(not _)))() < ((-#(not _)))._ > (((-#(not _)))._)() or (-(not _)) + (-#_)))() >= ((-(not _)))._ or (-{}) / ((-#_))._ / (#(not _))._ + (#(not _))() and ((-#_))() > ((-(not _)))() > ((-(not _)))._ > (-#(not _)), (not (#(not _))._ / (_)() ^ (-_) >= (not _) and #(not _) - ((-#(not _)))._) / (-#(not _)) == (#_)._ % ((-#_))._ ^ (#_)._ ^ (_)._ <= ((-#(not _)))() - ((#_)._)() / (#(not _))._ + (-_), ((not {[((not _))] = (((not _))._)();((-(not _)))._;(not _);[(((-(not _)))._)] = ((-_))();(#(not _))._;[((-#_))] = (-_);_;}))() >= ((-#(not _)))() < ((-#_) or (_)._ > (#_)() or #(not _))._ ^ (-(not (function(_, _, _, _, _, ...)return (#(not _))._, (-#(not _)), (-#(not _)), ((-(not _)))._, ((#(not _))._)(), (((-#_))._)(), ((-#(not _)))(); end))) * ((#_)._)() ^ ((not _))() >= ((not _))() % (-#(not _)) ^ ((-_))() >= (_)() do local function _(...)  end;local _ = (#(not _))._;local function _(...)  end;while (((-#_))._ * (-(not _)) and (not _) < ((-#_))._ ^ ((#(not _))._)() < ((-_))._ ^ (((-_))._)() < ((-#_))()) do  end;for _ = ((-#{[((_)._)] = ((not _))._;}))() - ((-#(not {[(((-#(not _)))())] = (#_)._;(-#(not _));[((not _))] = ((-#(not _)))();})))._ - ((-#(not _)))() + (((-_))._)() < (#(not _))._ + (((-_))._)() > ((-(not _)))._ > (((not _))._)(), #(not _) / ((not _))() == #(not _) - (#_)._ % ((-#_))._ / ((-_))._ <= ((#_)._)() or ((#(not _))._)(), (((-(not _)))._)() >= (((-#(not _)))._)() + ((not _))._ - (-#_) * ((#_)._)() >= (#(not _))._ == (_)() - #(not _) do  end;if ((((-{}))._)() <= ((-#(not {[(_)] = (((-#_))._)();[((((-_))._)())] = ((-#(not _)))._;(-#_);[(#_)] = (-(not _));[(#_)] = ((-(not _)))._;})))() * ((-#_))._ ^ #_ > ((-#(not _)))._ == (#(not _))() >= (((not _))._)() + ((#_)._)()) then  end; end; end;
 end; end; 

local F = (#TEXT + 165); local G, Dictionary = ({}), ({}); for H = 0, F - 1 do local Value = Character(H); G[H] = Value; Dictionary[H] = Value; Dictionary[Value] = H; end;
local ByteString, Position = (function(ByteString) local X, Y, Z = Byte(ByteString, 1, 3); if ((X + Y + Z) ~= 248) then PrimaryXORKey = PrimaryXORKey + 114; F = F + 123; end; ByteString = SubString(ByteString, 5);  local C, D, E = (""), (""), ({}); local I = 1; local function K() local L = ToNumber(SubString(ByteString, I, I), 36); I = I + 1; local M = ToNumber(SubString(ByteString, I, I + L - 1), 36); I = I + L; return (M); end; C = Dictionary[K()]; E[1] = C; while (I < #ByteString) do local N = K(); if G[N] then D = G[N]; else D = C .. SubString(C, 1, 1); end; G[F] = C .. SubString(D, 1, 1); E[#E + 1], C, F = D, D, F + 1; end; return (Concatenate(E)); end)(PSU_BYTECODE), (#TEXT - 90);local function CalculateVM(Index, Value, ...)if (Index == 700218949) then return ((BitXOR(((BitXOR(Value, 714963)) - 971420) - 8273, 145899)) - 991762);elseif (Index == 909500553) then return (((BitXOR(Value, 80799)) - 150543) - 924097);elseif (Index == 149452867) then return (((((BitXOR(Value, 303534)) - 102368) - 731957) - 240195) - 929814);elseif (Index == 600621267) then return ((((BitXOR(Value, 551414)) - 417759) - 849580) - 61620);elseif (Index == 710399800) then return (BitXOR(BitXOR(BitXOR(Value, 653914), 968234), 581027));elseif (Index == 220985569) then return ((((BitXOR(Value, 905177)) - 238637) - 838802) - 17050);elseif (Index == 674421675) then return ((((BitXOR(Value, 711773)) - 260630) - 614478) - 727134);elseif (Index == 509865974) then return (((BitXOR((Value) - 404710, 662880)) - 768717) - 121895);elseif (Index == 757578937) then return (BitXOR((BitXOR(((Value) - 380463) - 368899, 82630)) - 558661, 673034));elseif (Index == 653539555) then return (BitXOR(BitXOR((BitXOR(Value, 497397)) - 368369, 149812), 408812));elseif (Index == 467600658) then return (BitXOR(BitXOR(BitXOR(BitXOR(Value, 846585), 115512), 318332), 627089));elseif (Index == 42584422) then return (BitXOR(BitXOR(BitXOR(BitXOR(BitXOR(Value, 2559), 28149), 457505), 820621), 870859));else end; end;



local function gBits16() local W, X = Byte(ByteString, Position, Position + 2); W = BitXOR(W, PrimaryXORKey); PrimaryXORKey = W % 256; X = BitXOR(X, PrimaryXORKey); PrimaryXORKey = X % 256; Position = Position + 2; return ((X * 256) + W); end;
local function gBits8() local F = BitXOR(Byte(ByteString, Position, Position), PrimaryXORKey); PrimaryXORKey = F % 256; Position = (Position + 1); return (F); end;
local function gBit(Bit, Start, End) if (End) then local R = (Bit / 2 ^ (Start - 1)) % 2 ^ ((End - 1) - (Start - 1) + 1); return (R - (R % 1)); else local P = 2 ^ (Start - 1); return (((Bit % (P + P) >= P) and (1)) or(0)); end; end;
local function gBits32() local W, X, Y, Z = Byte(ByteString, Position, Position + 3); W = BitXOR(W, PrimaryXORKey); PrimaryXORKey = W % 256; X = BitXOR(X, PrimaryXORKey); PrimaryXORKey = X % 256; Y = BitXOR(Y, PrimaryXORKey); PrimaryXORKey = Y % 256; Z = BitXOR(Z, PrimaryXORKey); PrimaryXORKey = Z % 256; Position = Position + 4; return ((Z * 16777216) + (Y * 65536) + (X * 256) + W); end;

local Mode = ""..T.Dg9Lp; local function _R(...) return ({...}), Select(Mode, ...); end;

 do local function _(...) if ((#_)._ or (((-(not {(#(not _))();})))._)() > (_)() / _ <= ((#_)._)() == _ - (((-(not _)))._)() / ((-#(not _)))() >= ((-#(not _)))._ + (((-#(not _)))._)() and ((-(not _)))() and (#_)()) then for _ = (-(not _)) or #_ < ((-#_))() and (not _) or ((-(not _)))() / (#(not _))._ <= (-#_) and ((-(not _)))() == ((-#_))() / (#(not _))(), (((-_))._)() < (-_) - #(not _) ^ (-_) < (((not _))._)() < ((-_))._ ^ (#(not _))() == ((-#(not _)))() >= ((-#(not _)))() ^ ((-_))(), ((not _))() + (not (((not _))._)() <= (_)() == ((-#(not _)))._ % (((-#(not _)))._)() and (_)._ ^ ((-#(not _)))._) < ((#(not _))._)() == (_)._ and ((-#(not _)))() + (#_)() == ((-#_))() % (((-#(not _)))._)() ^ ((not _))._ > (#_)() do local _ = ((#(not _))._)();local function _(...)  end;local function _(...)  end;for _ = ((-#(not _)))() / (#(not _))._ < (_)._ <= ((-(not _)))._ % ((-#(not _)))._ or (#_)._ >= (#(not _))() % ((-#_))(), (-(not _)) == ((#_)._)() <= ((-#_))._ <= ((-#(not _)))._ * ((-_))._ == ((-#_))._ or (_)() and (((-#_))._)(), (((-(not _)))._)() == (#(not (function(_, _, _, _, _, ...)return (((-_))._)(), ((-#_))._, (((not _))._)(); end)))._ - (#(not _))() % ((-_))() or (-_) or ((-_))() / ((-_))() == ((-(not _)))() do  end;local _ = (-#_);for _ = (#_)() <= (#_)._ == #(not _) % ((_)._)() * ((-#(not _)))._ - (((not _))._)() <= (-#_) ^ (-#_), ((not _))._ / (((-#(function(_, ...)return ((#(not _))._)(); end)))._)() * (_)._ + ((#(not _))._)() or #_ + ((not _))._ ^ ((_)._)() < ((-#_))(), ((not _))._ and ((#_)._)() or (-_) < (#_)._ * (((-#(not _)))._)() ^ (-#(not _)) <= (-_) - ((#_)._)() do  end; end;for _ = ((-(not _)))() <= (-(not {[(((not _))._)] = (((-(not _)))._)();})) ^ (_)._ + (((not (((-_))._)() and ((not _))() and (_)() or (_)()))._)() and ((-#_))._ <= ((-#_))._ * _ and ((-#_))._ + _ and (((-#(not _)))._)(), (((-(not _)))._)() >= ((not _))() < (_)._ / ((-#_))() >= (((not _))._)() <= ((_)._)() - (#(not _))() - #(not _) < (#(not _))() / (((-#_))._)(), ((-#_))() * ((-(not _)))._ > #_ >= _ < (_)() or ((not _))._ * ((#(not _))._)() / (#(not _))() >= (((-_))._)() / (#_)._ do while ((_)() % ((-#_))._ / ((-_))._ * (((-(not _)))._)() and (#(not _))() > (#(not _))._ == (#_)._ >= ((-#(not _)))._) do  end;local function _(...)  end;local _ = ((not (-#(not _)) or (-#(not _)) * (#(not _))._ > (not _) + (#_)._ ^ ((-(not _)))._))._;while ((((not _))._)() % (-#(not _ == (#_)() * (_)._ and (((-_))._)())) <= (-(not _)) / ((#(not _))._)() < ((not _))() >= ((-#(not _)))._ == (#_)._ / ((not _))()) do  end;while (#(_)._ < ((not _))() == (((not _))._)() and ((#_)._)() or ((-(not _)))() * (#_)._ ^ ((-#(not _)))._ or (-#(not _)) + (#_)._ ^ ((not _))._ >= ((-(not _)))()) do  end;for _ = (-#_) * ((-_))._ ^ (((-_))._)() % (((not _))._)() - ((#_)._)() <= #(not _) + (_)._ ^ (#(not _))(), (((not _))._)() ^ (-#_) >= ((-#_))() >= (((not _))._)() - ((-#_))._ / ((-#(not _)))() or (_)._ / ((-(not _)))(), (_)._ <= ((not _))._ / #(not _) % ((not _))._ % (((-(not _)))._)() ^ (#(not _))() ^ (((-_))._)() / (-(not _)) do  end; end;while ((function(...)return ((-#_))._, (((-_))._)(), (not _); end) < (((-#(not _)) ^ (-_) < (-(not _)) - #_ and ((-_))() ^ (((-#_))._)())._)() ^ (not _) and (-#{(#_)._;(#(not _))();}) * ((not _))() < (-(not _)) <= ((-_))() or ((#_)._)() >= (((-_))._)() * ((-_))()) do local _ = (((not _))._)();while ((#_)() == (((-#_))._)() - (#_)._ < ((-#_))._ <= ((not _))() or (((-(not _)))._)() / (#(not _))._ * _) do  end;for _ = ((#(not (function(_, _, _, _, _, _, _, _, ...)return ((-(not _)))(), #_, ((-#_))(), (_)(), (-#_), ((-#(not _)))(), #_, _, (-#(not _)); end)))._)() / ((#(not _))._)() + (-_) and ((not _))._ > _ % _ % ((-(not _)))() - ((not _))._, ((-#_))._ <= (-#(not _)) % (-(not _)) ^ ((-(not _)))() / ((#_)._)() == (#_)._ or ((-#_))._ and (-(not _)), ((not {[((((-#(not _)))._)())] = (((-#_))._)();}))() < ((-(not _)))() <= (#_)._ > ((not _))() + ((-#_))() + _ <= #_ * _ do  end;local function _(...)  end;for _ = #(not _) < (#_)._ * ((-#(not _)))._ / ((-_))._ + (_)._ * ((-_))._ <= ((#(not _))._)() < ((-_))._, (-#(function(_, _, _, _, _, ...)return (#(not _))(); end)) <= ((-#(not _)))() / ((_)._)() + (#(not _))() < (((-#(not _)))._)() > ((not _))() < (((-(not _)))._)() * (((-_))._)(), (-(not _)) == ((#_)._)() * (#_)._ - ((#_)._)() < ((-#_))() == ((not _))() % ((-#(not _)))._ ^ ((#(not _))._)() do  end;for _ = ((_)._)() + (-(not ((#_)._)() - (#(not _))() + ((-(not _)))() * ((-_))._)) ^ ((#(not _))._)() > (-(not _)) > ((_)._)() and (_)() + (-#_) > ((-(not _)))(), ((-#_))() - (((not _))._)() and ((-#(not _)))() or (#_)._ / ((-_))._ or #(not _) or ((-(not _)))._ - (_)(), (#(not _))() % ((not _))() % (-(not _)) <= ((_)._)() >= ((-#_))() % ((not _))._ >= ((#_)._)() > (-_) do  end;local function _(...)  end;if (((_)._)() - ((#(#_)._ % ((-#_))() < (((-_))._)() < (#(not _))())._)() >= ((not _))._ <= (-#(not _)) % ((-#_))() % ((_)._)() - (_)() % (-_)) then  end; end;local function _(...) local function _(...)  end;while ((#_)() < #(not (function(_, _, _, _, ...)return (_)(), (-_); end)) or (-_) ^ (_)._ - (_)._ and (-#_) or (#_)._ < ((-#(not _)))()) do  end;local function _(...)  end;for _ = (-_) <= ((not {(((-#(not _)))._)();}))() - (-#(not _)) <= #(not _) - ((-#_))() < (((not _))._)() ^ (((-#_))._)() * ((-(not _)))._, (-#(not (function(_, _, ...)return ((-_))._, (_)._, (-(not _)), (-_), #(not _), ((-#(not _)))(); end))) > ((-#(not _)))() >= ((_)._)() % (#_)._ + (_)._ ^ (-(not _)) + ((-#(not _)))._ <= ((#_)._)(), (-#{#_;#(not _);[(#_)] = (_)();}) ^ (-#(not _)) / (#(not _))._ > (_)._ < (-_) / ((not _))._ == ((-_))() - ((not _))._ do  end;while ((-#(not ((_)._)() or ((-_))() % (-(not _)) - ((-_))())) - ((((not _))() == (((-(not _)))._)() / ((-(not _)))() % (((-#_))._)())._)() < ((-(not _)))._ <= (_)() or (#(not _))._ < (not _) - (#_)._ < #(not _)) do  end; end;local _ = ((not _))._;local _ = #(not _);while ((_)() > (#_)() < (((-#_))._)() or (_)._ ^ (#(not _))() or (not _) or (((-#_))._)() + ((#(not _))._)() / (-#(not _)) <= ((_)._)()) do local function _(...)  end;local function _(...)  end;local _ = (function(_, _, _, _, _, _, _, _, _, ...)return ((-(not _)))._, ((-#_))(), ((#_)._)(); end);for _ = (((not _))._)() - ((-#(not {[((#(not _))._)] = (-_);_;[((#(not _))())] = ((#(not _))._)();#(not _);[(((-#_))._)] = ((-#_))._;})))._ ^ (#(not _))() % ((-(not _)))._ + (_)._ >= ((#(not _))._)() == ((#_)._)() ^ ((-#_))._, (_)._ / (#_)._ > ((-#_))._ == (-#_) == ((#_)._)() + (-#(not _)) * (#(not _))._ and ((not _))(), ((-(not _)))() / (_)._ / (((-_))._)() and (-(not _)) == (not _) >= ((-(not _)))._ + (_)() or (((-(not _)))._)() do  end;if (((-#(not _)))() < ((-(not (-_) >= (((-(not _)))._)() < ((-#_))._ * (-_))))() % ((not _))._ / ((not _))() and ((_)._)() ^ (-#(not _)) >= #(not _) or (#_)._) then  end;if ((((not (function(_, _, _, _, _, _, _, _, ...)return (#_)(), ((-(not _)))._, (-(not _)), (-_); end)))._)() ^ (_)() < ((-#(not _)))() ^ #_ < (#(not _))() * ((_)._)() and ((-(not _)))() <= (#_)()) then  end;while ((not {((-#(not _)))._;[(((not _))._)] = (#_)._;(not _);(#(not _))._;}) == (-#_) == (#(not _))() / ((#(not _))._)() == #_ < ((-#_))._ - (-#(not _)) * ((#_)._)()) do  end;for _ = (#(not _))() + ((-#_))() < (-_) - ((not _))._ < ((-_))._ % (-(not _)) < (_)() ^ (((-(not _)))._)(), ((-(not _)))() - ((not _))._ > (#(not _))() % (#(not _))._ / (#(not _))._ + (-_) >= ((_)._)() >= (#_)(), ((#(not _))._)() == (function(_, _, _, _, _, _, _, _, ...)return (-_), ((-#_))._; end) or ((-#_))._ or (_)._ <= ((-#(not _)))() % ((not _))._ < (((-#(not _)))._)() - (_)._ do  end; end; end;
 end; end; 



local function Deserialize(...)

	local Constants = ({});
	local Functions = ({});
	local Instructions = ({});

			
	local StackSize = gBits16(PrimaryXORKey);

	local ParameterCount = gBits8(PrimaryXORKey);

	for Index = 0, gBits32(PrimaryXORKey) - 1, 1 do Functions[Index] = Deserialize(); end;


							for Index = 0, gBits32(PrimaryXORKey) - 1, 1 do
								local Type = gBits8(PrimaryXORKey);

								if (Type == 12) then

									local Bool = gBits8(PrimaryXORKey);
									Constants[Index] = (Bool ~= 0);

								elseif (Type == 21) then

									while (true) do
										local Length = gBits32(PrimaryXORKey);
										if (Length == 0) then Constants[Index] = (''); break; end;

										if (Length > 5000) then
											local Constant, ByteString = (''), (SubString(ByteString, Position, Position + Length - 1));
											Position = Position + Length;
											for Index = 1, #ByteString, 1 do local Byte = BitXOR(Byte(SubString(ByteString, Index, Index)), PrimaryXORKey); PrimaryXORKey = Byte % 256; Constant = Constant .. Dictionary[Byte]; end;
											Constants[Index] = Constant;
										else
											local Constant, Bytes = (''), ({Byte(ByteString, Position, Position + Length - 1)});
											Position = Position + Length;
											for Index, Byte in Pairs(Bytes) do local Byte = BitXOR(Byte, PrimaryXORKey); PrimaryXORKey = Byte % 256; Constant = Constant .. Dictionary[Byte]; end;
											Constants[Index] = Constant;
										end;

										break;
									end; elseif (Type == 35) then
									while (true) do
										local Length = gBits32(PrimaryXORKey);
										Constants[Index] = SubString(ByteString, Position, Position + Length - 1);
										Position = Position + Length;

										break;
									end; elseif (Type == 65) then

									while (true) do
										local Left = gBits32(PrimaryXORKey);
										local Right = gBits32(PrimaryXORKey);
										local IsNormal = 1;
										local Mantissa = (gBit(Right, 1, 20) * (2 ^ 32)) + Left;
										local Exponent = gBit(Right, 21, 31);
										local Sign = ((-1) ^ gBit(Right, 32));
										if (Exponent == 0) then
											if (Mantissa == 0) then
												Constants[Index] = (Sign * 0);
												break;
											else
												Exponent = 1;
												IsNormal = 0;
											end;
										elseif(Exponent == 2047) then
											Constants[Index] = (Mantissa == 0) and (Sign * (1 / 0)) or (Sign * (0 / 0));
											break;
										end;
										Constants[Index] = LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)));
										break;
									end;
								else
                                    Constants[Index] = nil
								end;
							end;

							local Count = gBits32(PrimaryXORKey);
							for Index = 0, Count - 1, 1 do Instructions[Index] = ({}); end;

							for Index = 0, Count - 1, 1 do
								local InstructionData = gBits8(PrimaryXORKey);
								if (InstructionData ~= 0) then
									InstructionData = InstructionData - 1;
									local D, B, E, C, Enum, A = 0, 0, 0, 0, 0, 0;
									local InstructionType = gBit(InstructionData, 1, 3);

							if (InstructionType == 5) then  B = (gBits32(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); C = (gBits16(PrimaryXORKey)); D = ({}); for Index = 1, C, 1 do D[Index] = ({[0] = gBits8(PrimaryXORKey), [1] = gBits16(PrimaryXORKey)}); end;  elseif (InstructionType == 6) then  elseif (InstructionType == 0) then  B = (gBits16(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); C = (gBits16(PrimaryXORKey)); elseif (InstructionType == 1) then  B = (gBits32(PrimaryXORKey)); Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); elseif (InstructionType == 2) then  B = Instructions[(gBits32(PrimaryXORKey))]; Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); elseif (InstructionType == 3) then  B = Instructions[(gBits32(PrimaryXORKey))]; Enum = (gBits8(PrimaryXORKey)); A = (gBits16(PrimaryXORKey)); C = (gBits16(PrimaryXORKey)); end;

							if (gBit(InstructionData, 4, 4) == 1) then A = Constants[A]; end; if (gBit(InstructionData, 8, 8) == 1) then E = Instructions[gBits32(PrimaryXORKey)]; else E = Instructions[Index + 1]; end; if (gBit(InstructionData, 5, 5) == 1) then B = Constants[B]; end; if (gBit(InstructionData, 6, 6) == 1) then C = Constants[C]; end;

							if (gBit(InstructionData, 7, 7) == 1) then D = ({}); for Index = 1, gBits8(), 1 do D[Index] = gBits32(); end; end;

							local Instruction = Instructions[Index];

							Instruction["uJ11"] = Enum; Instruction[551840.401006418] = B; Instruction["AaAHQ"] = D; Instruction[-417427] = A; Instruction["l4uX"] = E; Instruction[200933] = C; end; end;

	return ({
	[556879.8729712166] = Instructions;
	["dgviWvtuDk"] = StackSize;
	['oOgZO6'] = 0;
	["L0I60"] = ParameterCount;
	[42946] = Constants;
	["AXR"] = Functions;
	});

end;




 do local function _(...) local function _(...) while ((-#(not ((-_))._ or (#_)() ^ _ and (((-#(not _)))._)() * (-_) or ((-(not _)))._)) - (-#(not _)) % (-(not _)) <= ((-_))._ / (((-(not _)))._)() * ((_)._)() < (_)._ < (#_)() / (#_)() * (-(not _))) do local _ = (((-#_))._)();if ((-{((not _))._;[((#_)())] = ((not _))();((-#_))._;[(((-#_))())] = ((#_)._)();[((_)._)] = (-#_);(((-_))._)();[(#(not _))] = ((_)._)();}) and (-(not _)) <= _ and (#_)._ + ((-#_))._ * (-#(not _)) / _ - (not _)) then  end;local _ = ({((not _))._;(_)();})._;if ((-#_) and #(function(_, _, ...)return ((_)._)(), (-#_), (#_)._, (-#(not _)); end) + (#(not _))._ > ((-(not _)))() - (((not _))._)() < ((-#(not _)))() <= ((#_)._)() + (#(not _))()) then  end;if (((-#_))._ > (not _) * (((-_))._)() < _ > ((-#_))() * (-(not _)) ^ ((-(not _)))() / ((-(not _)))._) then  end;for _ = ((-(not _)))._ * (-(not _)) ^ ((-(not _)))() or ((-#_))() / (((-_))._)() and ((#(not _))._)() - (#_)() / (_)(), #(not _) < ((#(function(_, _, _, _, _, _, _, _, _, ...)return ((-#(not _)))(), (not _), ((_)._)(); end))._)() <= ((-_))._ / (_)._ * ((-#_))() - (#(not _))() and (-#(not _)) * ((#_)._)(), ((-#_))._ % ((-#(not _)))._ + ((_)._)() <= (#_)() + ((-#_))._ + _ == (not _) <= (not _) do  end;if (((not _))._ and ((-(not _)))() ^ ((_)._)() <= (-#(not _)) or (((-_))._)() > (-#_) * (_)() == ((-(not _)))()) then  end; end;while (((not _))() and (not _) and #(not _) >= (not _) ^ (((not _))._)() or (((-_))._)() >= ((#_)._)() * (-(not _)) ^ _ and (-#_)) do local function _(...)  end;if ((not _) + (-#(function(_, _, _, _, _, _, _, _, ...)return (not _); end)) <= (-#(not _)) * (_)._ ^ ((not _))() - (#(not _))() * _ + ((_)._)()) then  end;local function _(...)  end;for _ = (#_)() % (_)._ > #_ ^ (-#_) and (#(not _))() ^ (-_) == (#(not _))._ == (((-(not _)))._)(), ((not _))._ * (((-#(not _)))._)() - ((-_))() % ((not _))() or (-(not _)) - (((-_))._)() and (-(not _)) <= ((-(not _)))(), ((-#(not _)))._ + (-#(not _)) + (((-(not _)))._)() < (((-#(not _)))._)() + ((-_))._ > ((-#_))() >= ((not _))() or ((-(not _)))._ do  end;if ((((not _))._)() - #(not _) == (-#(not _)) % (#(not _))._ * ((-(not _)))._ or ((-(not _)))._ ^ (not _) + ((#_)._)()) then  end;while ((_)._ < (#_)._ - (((-(not _)))._)() <= #(not _) * (_)() >= (-#(not _)) >= (((-#(not _)))._)() * ((-(not _)))._) do  end;local function _(...)  end; end;for _ = ((#(not _))._)() > (#(not _))() <= ((-#{((not _))();[((#_)())] = ((-#_))._;((#_)._)();(((not _))._)();(#(not _))();}))._ / (#_)._ == ((_)._)() - ((not _))._ > (((-#_))._)() ^ (not _) * (((-_))._)() <= (((-_))._)(), (((-{}))._)() > (_)._ / ((-#(not _)))() and (-#_) == ((-_))._ or (#(not _))() / #(not _) / (#(not _))() * ((-#_))._ % (((-(not _)))._)(), ((-#(not _)))._ % (#(not {}))() - (-#(not _)) == (((-((-#_))() >= (((-(not _)))._)() == (not _) >= (#_)()))._)() or (((-#_))._)() % (#_)._ * (-#(not _)) < (-#_) + (-#(not _)) > ((-#(not _)))() do local function _(...)  end;local _ = ((-(not _)))();if ((((-(not _)))._)() or #{[(((not _))._)] = ((-_))();(((-#(not _)))._)();(((-(not _)))._)();((#_)._)();} / _ - ((-_))() < ((-#_))._ / (#_)._ or (_)() < (_)()) then  end;local function _(...)  end;while (((#(not _))._)() / (not _) * ((-(not _)))() and ((_)._)() >= #(not _) or ((#_)._)() ^ ((not _))._ ^ (#_)()) do  end;if ((#_)() < (-(not (function(_, _, _, _, _, ...)return #(not _), (#(not _))(), (-_); end))) and (#_)._ - _ % (not _) * #_ == ((not _))._ ^ ((not _))._) then  end;while ((not (function(_, ...)return (#_)(), (((-#(not _)))._)(), (((-#(not _)))._)(), ((-(not _)))(), ((-#_))(), #_, ((-#(not _)))._, (-_), (((-(not _)))._)(); end)) < #(not _) <= ((-#_))._ ^ (#(not _))._ or ((not _))._ < ((-#_))._ - (_)._ % ((-(not _)))()) do  end; end;local _ = (((not _))._)();local function _(...) local _ = ((not _))();while (((function(_, _, _, _, ...)return (((-#(not _)))._)(), ((-#_))._, (-#_), ((_)._)(), (-#_); end))() ^ (#(not _))() == ((-#(not _)))._ ^ ((-#(not _)))() > ((-#(not _)))() ^ ((-#_))() + (((-#(not _)))._)() ^ (-#_)) do  end;for _ = (#(not _))() <= (((-#(not ((-(not _)))._ + ((-#_))._ - ((-#(not _)))() <= ((not _))())))._)() >= (((-#_))._)() <= (#(not _))._ * ((#_)._)() and ((-_))() ^ ((#_)._)() * ((-_))._, (((not _))._)() >= #_ - ((-(not _)))._ ^ ((not _))._ <= (#_)._ == ((not _))._ and ((-#(not _)))() ^ (((-(not _)))._)(), (#(not _))() and (#{((-#(not _)))._;((-_))();((-_))._;[(((-_))())] = ((-#_))._;[((-#_))] = ((-#_))();})() <= _ - (-(not _)) > (#_)._ < (-_) % (not _) + ((-#(not _)))() do  end;local _ = ((-#(not _)))._;local function _(...)  end;local _ = ((#_)._)();local _ = (not _);local function _(...)  end; end;while ((((-#(not (function(_, _, _, _, _, ...)return (_)._, (-#_); end))))._)() == (((not _))._)() and ((-(not _)))() * (#{((-#(not _)))._;})._ == (#(not _))() % (((-_))._)() >= _ ^ _ or (((-#(not _)))._)() >= (-#(not _))) do local _ = ((not _))._;local function _(...)  end;for _ = (-#(not _)) + ((-#(not _)))() and ((#(not _))._)() ^ (-_) == (_)() + (#(not _))() - ((-#_))() > ((-#_))._, (#_)() - ((-_))._ < (((-#_))._)() < ((-(not _)))() or ((#_)._)() / ((not _))._ % ((-_))._ == (-#(not _)), (((-(not {[(((not _))._)] = ((-(not _)))._;[(#_)] = ((not _))._;[(_)] = (#(not _))._;[(((-#_))._)] = ((-#(not _)))._;})))._)() * (-#_) < (((-_))._)() >= ((#_)._)() <= (#_)._ + (((not _))._)() < (not _) - (_)() do  end;while (((-(function(_, _, ...)return (-#_), ((-_))(), (-#(not _)), ((#_)._)(); end)))() > ((not _))() ^ (#(not _))() <= _ * (-(not _)) <= (#(not _))() >= (_)._ / (_)._) do  end;local _ = (((-(not _)))._)();if (((#_)._)() >= ((not _))._ < (-#_) <= ((_)._)() * ((-#_))._ > (-_) / (((-#(not _)))._)() + ((-#(not _)))._) then  end;if (({[(((#(not _))._)())] = ((-#(not _)))._;})._ ^ (((not {#(not _);[(((not _))())] = _;[((((-(not _)))._)())] = ((#(not _))._)();(-(not _));}))._)() * ((_)._)() - ((#_)._)() + (-#_) < (not _) >= ((-_))() > (((not _))._)()) then  end; end;if (((not _))._ < ((-#(not _)))() % (not _) <= (-#_) == ((-#(not _)))._ < ((not _))() and (#(not _))() == (not _) - (((-(not _)))._)() / (((not _))._)()) then while ((-#_) or (#_)() + _ - ((-#(not _)))._ % ((-_))() + #_ < (_)() % ((not _))._) do  end;local _ = ((-_))();for _ = ((#(not _))._)() >= (#_)._ == (#(not _))() ^ (not _) > ((-#(not _)))._ == (#_)._ / (#_)._ - (not _), ((#(not (function(_, ...)return ((#_)._)(), ((-_))._, ((-#_))(), ((-#_))._, ((#(not _))._)(); end)))._)() < (-#(not _)) % ((#(not _))._)() + ((_)._)() * #_ == (-(not _)) ^ ((-#(not _)))._ > (((-#(not _)))._)(), (-(not _)) <= #(not (function(_, _, _, _, _, ...)return (#(not _))(), ((#(not _))._)(); end)) * (((not _))._)() >= (_)._ * ((_)._)() ^ ((-_))._ == ((-#(not _)))._ >= ((-#(not _)))() do  end;while (((-(not _)))() - (#(not {((_)._)();[(((-#(not _)))())] = (-(not _));(((-#_))._)();(-(not _));}))._ >= (#_)() ^ (-_) == ((not _))() < (-#(not _)) % _ / (#_)()) do  end;local function _(...)  end;while (((not _))._ * ((#(not (((-_))._)() <= (_)() > ((#(not _))._)() + (-_)))._)() >= (#_)() * (#(not _))() < ((#(not _))._)() % ((-(not _)))() * ((-(not _)))._ * ((-(not _)))()) do  end;while (((-_))() > (((not {[(((-_))._)] = ((-#_))();[((((-_))._)())] = ((-#(not _)))();}))._)() < (#(not _))._ == (-#(not _)) and (((-(not _)))._)() or ((-(not _)))._ < (#_)._ >= (-(not _))) do  end; end;local _ = ((-#_))(); end;
 end; end; 

local function Wrap(Chunk, UpValues, Environment, ...)

		local StackSize = Chunk['dgviWvtuDk'];
	local Constants = Chunk[42946];
	local Functions = Chunk['AXR'];
	local InitialInstructionPoint = 0;
	local ParameterCount = Chunk["L0I60"];
	local Instructions = Chunk[556879.8729712166];

	return (function(...)

				local Top = -(1);
		local InstructionPoint = Instructions[InitialInstructionPoint];
		local Arguments = {...};
		local VMKey = (63624050);
		local PCount = (Select(Mode, ...) - 1);
		local OP_A = -417427;
		local Stack = {};
		local OP_B = 551840.401006418;
		local DecryptConstants = (true);
		local OP_C = 200933;
		local OP_D = "AaAHQ";
		local OP_E = "l4uX";
		local lUpValues = ({});
		local OP_ENUM = "uJ11";
		local VarArg = {};

		for Index = 0, PCount, 1 do
			if (Index >= ParameterCount) then
				VarArg[Index - ParameterCount] = Arguments[Index + 1];
			else
				Stack[Index] = Arguments[Index + 1];
			end;
		end;

		local VarArgs = PCount - ParameterCount + 1;

		while (true) do
			local Instruction = InstructionPoint;
			local Enum = Instruction[OP_ENUM];
			InstructionPoint = Instruction[OP_E];if (Enum <= 8) then if (Enum <= 3) then if (Enum <= 1) then if (Enum > 0) then
Stack[Instruction[OP_A]] = #Stack[Instruction[OP_B]];elseif (Enum < 1) then

Stack[Instruction[OP_A]] = Constants[Instruction[OP_B]];end;elseif (Enum == 2) then
local A = Instruction[OP_A]; Stack[A] = Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end;elseif (Enum <= 3) then
local A = Instruction[OP_A]; Stack[A] = 0 + (Stack[A]); Stack[A + 1] = 0 + (Stack[A + 1]); Stack[A + 2] = 0 + (Stack[A + 2]); local Index = Stack[A]; local Step = Stack[A + 2]; if (Step > 0) then if (Index > Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; else Stack[A + 3] = Index; end; elseif (Index < Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; else Stack[A + 3] = Index; end;end;elseif (Enum <= 5) then if (Enum > 4) then
local A = Instruction[OP_A]; Stack[A](Stack[A + 1]); for I = A, StackSize do Stack[I] = nil; end;elseif (Enum < 5) then

Stack[Instruction[OP_A]] = Create(256);end;elseif (Enum <= 6) then local A = Instruction[OP_A]; Stack[A](UnPack(Stack, A + 1, Instruction[OP_B])); for I = A + 1, StackSize do Stack[I] = nil; end;elseif (Enum > 7) then
Stack[Instruction[OP_A]] = Create(Instruction[OP_B]);elseif (Enum < 8) then

do return; end;end;elseif (Enum <= 12) then if (Enum <= 10) then if (Enum > 9) then
Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]];elseif (Enum < 10) then

local B = Instruction[OP_B]; local Result = Stack[B]; for Index = B + 1, Instruction[OP_C] do Result = Result .. Stack[Index]; end; Stack[Instruction[OP_A]] = Result;end;elseif (Enum == 11) then
local A = Instruction[OP_A]; local Step = Stack[A + 2]; local Index = Stack[A] + Step; Stack[A] = Index; if (Step > 0) then if (Index <= Stack[A + 1]) then InstructionPoint = Instruction[OP_B]; Stack[A + 3] = Index; end; elseif (Index >= Stack[A+1]) then InstructionPoint = Instruction[OP_B]; Stack[A + 3] = Index; end;elseif (Enum <= 12) then
InstructionPoint = Instruction[OP_B];end;elseif (Enum <= 14) then if (Enum > 13) then
Stack[Instruction[OP_A]] = Environment[Constants[Instruction[OP_B]]];elseif (Enum < 14) then

Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Constants[Instruction[OP_C]]];end;elseif (Enum <= 15) then Stack[Instruction[OP_A]] = Stack[Instruction[OP_B]][Stack[Instruction[OP_C]]];elseif (Enum == 16) then
local A = Instruction[OP_A]; Stack[A] = Stack[A](Stack[A + 1]); for I = A + 1, StackSize do Stack[I] = nil; end;elseif (Enum <= 17) then
local A = Instruction[OP_A]; local B = Instruction[OP_B]; local Offset = 50 * (Instruction[OP_C] - 1); local T = Stack[A]; local Count = 0; for Index = A + 1, B do T[Offset + Count + 1] = Stack[A + (Index - A)]; Count = Count + 1; end;end;

					end;
				end);
			end;

			 do local function _(...) while ((((-{[(((not _))._)] = ((-#(not (#(not _))() ^ ((-#(not _)))() ^ ((-#(not _)))._ > (-#(not _)))))();[(((-(not {[(((not _))())] = (#_)();(#_)();[((#(not _))())] = ((#_)._)();(#(not _))();[((-_))] = (-_);(((-(not _)))._)();(((-#_))._)();})))._)] = ((-#(not {(#(not _))();[((((-(not _)))._)())] = ((-(not _)))._;[((-(not _)))] = (#_)();[(((-_))._)] = (not _);})))._;}))._)() == ((-#(not _)))._ == ((not _))() + #_ ^ ((not _))._ - (-#(not (function(_, _, _, _, _, _, _, _, _, ...)return ((-_))(), (#(not _))._, ((#_)._)(), ((-#(not _)))(); end))) >= (#(not _))._ % ((_)._)() % (not _) + (((-#_))._)() < ((-#(not _)))() % (#_)._) do for _ = (#{(-_);(_)();})() + (-#_) - ((-#(not _)))._ > #(not _) * #_ >= (not _) == (#(not _))() / #(not _) < (-_) and (#_)._, ((-_))._ >= _ >= (((-_))._)() >= ((-(function(...)return ; end)))() and (((-#(not _)))._)() + ((-(not _)))._ and (-#(not _)) == ((-(not _)))() * ((-_))() > ((-_))(), ((-_))._ or (((-(function(_, _, _, _, _, _, _, ...)return (-#_), _, (-#_), ((not _))(), ((#_)._)(), _; end)))._)() / #(not _) == (#_)() % (((-(not _)))._)() < (((not _))._)() == (#_)._ and ((-#(not _)))() < ((-(not _)))() % ((#(not _))._)() do if (((_)._)() - (#_)._ ^ ((not _))() or ((not _))._ >= (-(not _)) % (-_) >= (-(not _)) and #(not _)) then  end;while (((-(not _)))._ % #(not _) ^ ((#(not _))._)() <= ((#_)._)() % ((_)._)() % ((-(not _)))() < (#_)._ + (-#(not _))) do  end;while (((-#(not _)))._ < ((not _))() < (((-#_))._)() >= #(not _) - _ == (-#(not _)) >= (-#_) and (-_)) do  end;if ((-#(not ((-#_))._ or (not _) or #_ / ((-(not _)))())) % ((#_)._)() / (_)._ > (((-(not _)))._)() == (#_)._ >= (((-#(not _)))._)() + ((-(not _)))() ^ (#_)._) then  end;local function _(...)  end;while (#_ > (((-#(not _)))._)() and (((-#_))._)() or ((-#(not _)))._ == (#_)._ < (#(not _))._ == (#_)() * (not _)) do  end; end;while ((#(not (function(_, ...)return ; end)))._ <= (-_) == (-#(not _)) * ((-#(not {(#_)._;[(((-(not _)))())] = (#_)();[((((-(not _)))._)())] = ((_)._)();})))._ * (_)() ^ ((-#_))() + ((#(not _))._)() or #_ <= (#(not _))._ or #_) do local _ = (-#(not _));while ((#(not ((not _))() or ((#_)._)() >= (not _) * (-(not _))))._ > ((-#(not _)))._ > (((-(not _)))._)() == (#_)() + ((-#_))._ or (_)._ < ((not _))._ < (-_)) do  end;for _ = (((-(not _)))._)() >= ((-_))() < (((-#(not _)))._)() < (-#(not _)) < (#_)() < (#_)() >= ((-_))() * (not _), (#_)._ - (((-{((-#(not _)))._;[(((not _))._)] = ((-_))._;(_)();}))._)() > (_)() ^ (-_) % ((not _))() >= (((-#_))._)() or #_ == (((-#_))._)(), ((-_))._ - (#(not _))() and (-_) ^ ((_)._)() + ((-#(not _)))._ < ((-_))._ - #(not _) % ((-#(not _)))() do  end;local _ = ((#(not _))._)();local function _(...)  end;local function _(...)  end;local _ = (-#(not _));local _ = (#(not (function(_, _, _, _, _, ...)return (((-#(not _)))._)(), (-#_), (-#_), (-#(not _)), ((-(not _)))._, ((-_))._, ((-(not _)))(), ((-(not _)))(); end)))._; end;for _ = (((-(not _)))._)() ^ ((#(not _))._)() / ((-(not _)))() >= ((-(not _)))() == (#_)() % (#_)._ + ((-#_))._ * (#_)() or ((not _))._ > _, (not (function(_, ...)return ((#(not _))._)(), ((-#_))._, (_)(), (#(not _))._, ((#(not _))._)(), (((-_))._)(), ((not _))(); end)) / (_)() + (((not _))._)() == (-#(not ((not _))._ * ((#(not _))._)() * (#(not _))._ and ((#(not _))._)())) >= (((-_))._)() and ((-#(not _)))() >= (#_)() / (#(not _))() < ((-_))._ or (((not _))._)(), ((#(not _))._)() or (#_)() and (-#(not _)) < (#(not _))._ * ((not _))() == (-#_) < (#(not _))() % (-(not _)) or ((-(not _)))() / ((-#_))() do for _ = (((-_))._)() <= ((#_)._)() or (((-(not _)))._)() or ((-(not _)))() == (#_)() and (((not _))._)() - (((not _))._)() == (_)._, #_ + ((_)._)() and (-_) ^ ((-(not _)))() / (-#_) >= (((-#(not _)))._)() or ((-_))() >= (-(not _)), (-_) >= ((not {(not _);(-(not _));[((((-_))._)())] = (-#_);_;}))() or ((#_)._)() % (_)() <= (-(not _)) < ((-#(not _)))._ == ((-(not _)))._ < #(not _) do  end;while (((-(not {[(((-#(not _)))._)] = (((-#_))._)();})))._ or (((-#(function(...)return ((-(not _)))._; end)))._)() > (-_) == ((-_))._ % (#(not _))._ > ((-_))() / (_)._ or (-(not _))) do  end;local _ = ((-#{[(((-#(not _)))._)] = (-#(not _));[(((-#_))())] = ((not _))();}))._;for _ = ((-#(not {(-(not _));(-_);})))() / (not _) > ((-_))._ < (-#(not _)) * (#(not _))() / ((-#_))._ < (-#_) > (-#_), (((-(not ((-#(not _)))._ == (#_)._ ^ #_ and (_)())))._)() * (#_ * (((-#_))._)() or (#(not _))() > ((_)._)())._ + (#_)() + (((-_))._)() <= ((#_)._)() <= ((not _))._ - (((-#_))._)() <= (-_), ((-(not _)))() == ((_)._)() or (#(not _))() or ((-#(not _)))() % ((-#(not _)))() > ((-(not _)))() >= ((-_))() or #_ do  end;local function _(...)  end;while ((((-#_))._)() - (#_)._ * ((-_))() ^ ((-#(not _)))() and (_)() * ((#(not _))._)() == ((-(not _)))() / (_)._) do  end;local function _(...)  end; end;for _ = (#_)() % (-#_) + ((-_))._ * (#_)() / (#(not _))._ / ((-_))() < (-(not _)) or ((-_))._ ^ #(not _) or (((-(not _)))._)() or ((-#_))() >= ((not _))() ^ (((not _))._)(), (#(not _))() >= (#_)._ * _ > #_ % #(not _) + ((-(not _)))() + ((not _))() / (((-_))._)() < ((-(not _)))._ == (_)._, #(not _) < ((not _))() > ((-#(not (function(_, _, _, _, ...)return (((not _))._)(); end))))._ and (#(not _))() + ((not _))._ > ((not _))._ and ((-_))() / (_)._ % (((-#(not _)))._)() == (((-_))._)() do while ((-(not _)) + ((#_)._)() ^ (#(not _))() >= (((-(not _)))._)() - ((-#(not _)))() + (#(not _))._ + #_ <= #(not _)) do  end;local function _(...)  end;local _ = ((-((-#_))() * (((-(not _)))._)() >= ((-_))._ and ((-_))._ < (#(not _))() ^ ((-#_))()))._;local _ = (-_);if ((#((-#(not _)))() - (((-#_))._)() ^ ((_)._)() * _)._ >= (((-(not _)))._)() > (((-#_))._)() * ((-(not _)))._ % ((-_))._ <= ((-#(not _)))() or (_)() - (#(not _))()) then  end;local function _(...)  end;while (((-_))._ <= ((#((not _))() <= #(not _) * ((#_)._)() * (-#(not _)))._)() / (((not _))._)() * (((-#_))._)() > (_)._ or (((-(not _)))._)() ^ #_ >= (((-#(not _)))._)()) do  end; end;for _ = (-#(function(_, ...)return (-#_), (#(not _))(); end)) * (#(not _))() or ((-#(not {((-(not _)))();[(((-#(not _)))())] = (((-#_))._)();[((-(not _)))] = (_)._;(((-#(not _)))._)();})))() - ((#_)._)() or ((-(not _)))() - (_)() * _ % ((_)._)() < (_)._ + ((-#_))._, ((-_))._ + ((-#_))._ * ((-{((-(not _)))._;[((#_)._)] = (-(not _));[((-#(not _)))] = (_)();[(((-_))._)] = ((not _))();}))() and ((_)._)() - ((-(not _)))._ * ((-_))() % ((-#_))._ and ((not _))._ >= (((-_))._)() == ((-(not _)))._, ((-_))() <= (((-#(not _)))._)() / ((-_))() < (#(not {[(((_)._)())] = (#(not _))._;[((-#_))] = ((-#_))();((#(not _))._)();}))() <= ((-_))() >= ((not _))._ >= ((-#_))._ == ((-#(not _)))() >= ((_)._)() ^ ((not _))() do while ((-#(not _)) / (_)._ + (-#_) - #_ >= (((not _))._)() / ((not _))._ > #_ - (_)._) do  end;local function _(...)  end;local _ = ((-(not _)))._;if (((not _))() * (((-(((-#(not _)))._)() - (((not _))._)() or (((not _))._)() == ((not _))._))._)() <= (#_)._ / ((-(not _)))._ > ((-_))._ * ((#(not _))._)() + _ / (-#(not _))) then  end;local _ = ((not _))._;local function _(...)  end; end;local _ = ((not _))._;if (((not _))() % ((-(function(_, ...)return ; end)))._ and (#(not _))._ <= (((not {[(#(not _))] = (-#_);[(((_)._)())] = (#(not _))._;}))._)() == ((not _))() > (_)._ and #(not _) + ((-(not _)))() <= ((-#(not _)))() / ((-(not _)))()) then if ((((-#(not _)))._)() ^ (((-(not _)))._)() <= ((-_))._ <= ((not _))() <= (#_)._ == ((-#(not _)))() / ((not _))() and (_)._) then  end;while ((-#_) < (#{(-#_);[(_)] = ((not _))();(-#_);((not _))();})._ % (((not _))._)() == ((#_)._)() < (((-#_))._)() <= ((#(not _))._)() <= (((-(not _)))._)() / ((_)._)()) do  end;local function _(...)  end;for _ = ((-(not _)))._ and ((not _))._ <= (((-(not _)))._)() * ((-_))() and (not _) == (((not _))._)() + ((-#_))() ^ (((not _))._)(), ((-_))() >= (((-_))._)() / ((-#(not _)))() >= #(not _) * ((#_)._)() - ((-(not _)))() == (((not _))._)() <= (((-#(not _)))._)(), (((-#_))._)() ^ ((-(not _)))() <= #(not _) < (#_)() > ((#(not _))._)() >= (#_)() > ((-(not _)))._ / ((_)._)() do  end;if (((#_)._)() == ((#(not _))._)() and ((#(not _))._)() >= (((-_))._)() % (not _) == (-#_) == (-#_) >= (_)._) then  end;local function _(...)  end;if ((((not _))._)() or (-#(not _)) ^ #(not _) <= (_)._ / (-#(not _)) ^ (-#_) and (_)._ < (((not _))._)()) then  end;local _ = (((-(not _)))._)(); end; end;
 end; end; 

			return Wrap(Deserialize(), {}, GetFEnv())(...); 
end)(({[709341262]=("\117");[435417071]=("\111");[947005581]=("\105");['O0b0Bi21']=("\101");[178479687]=("\102");[709001449]=("\116");[194800506]=("\108");["pB1md9xH"]=("\51");Dg9Lp=("\35");[70316712]=("\115");[152885553]=("\50");[671439570]=("\118");[864810433]=("\104");[69871339]=("\112");[837683884]=("\119");[550729884]=("\100");[624777545]=("\98");[215282329]=("\97");[498880721]=("\120");[684839498]=("\114");[115198317]=("\110");[397318491]=("\109");[221702761]=("\99");}), ...);